// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: test.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GamePlayerTest {

  /// <summary>Holder for reflection information generated from test.proto</summary>
  public static partial class TestReflection {

    #region Descriptor
    /// <summary>File descriptor for test.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgp0ZXN0LnByb3RvEg5HYW1lUGxheWVyVGVzdCLIAwoHVGVzdE1zZxISCgV0",
            "ZXN0RBgDIAEoAUgAiAEBEg8KB3Rlc3RJbnQYBCABKAUSEAoIdGVzdExvbmcY",
            "BSABKAMSDwoHdGVzdFMzMhgGIAEoERIQCgh0ZXN0UzM2NBgHIAEoEhIPCgd0",
            "ZXN0VTMyGAggASgNEg8KB3Rlc3RVNjQYCSABKAQSEwoLdGVzdEZpeGVkMzIY",
            "CiABKAcSEwoLdGVzdEZpeGVkNjQYCyABKAYSFAoMdGVzdHNmaXhlZDMyGAwg",
            "ASgPEhQKDHRlc3RzZml4ZWQ2NBgNIAEoEBIQCgh0ZXN0Qm9vbBgOIAEoCBIS",
            "Cgp0ZXN0U3RyaW5nGA8gASgJEhEKCXRlc3RCeXRlcxgQIAEoDBIPCgdsaXN0",
            "SW50GBEgAygFEjUKB3Rlc3RNYXAYEiADKAsyJC5HYW1lUGxheWVyVGVzdC5U",
            "ZXN0TXNnLlRlc3RNYXBFbnRyeRIqCgh0ZXN0RW51bRgTIAEoDjIYLkdhbWVQ",
            "bGF5ZXJUZXN0LlRlc3RFbnVtGi4KDFRlc3RNYXBFbnRyeRILCgNrZXkYASAB",
            "KAUSDQoFdmFsdWUYAiABKAk6AjgBQggKBl90ZXN0REoECBQQFSogCghUZXN0",
            "RW51bRIKCgZOT1JNQUwQABIICgRCT1NTEAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::GamePlayerTest.TestEnum), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePlayerTest.TestMsg), global::GamePlayerTest.TestMsg.Parser, new[]{ "TestD", "TestInt", "TestLong", "TestS32", "TestS364", "TestU32", "TestU64", "TestFixed32", "TestFixed64", "Testsfixed32", "Testsfixed64", "TestBool", "TestString", "TestBytes", "ListInt", "TestMap", "TestEnum" }, new[]{ "TestD" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///枚举的声明
  /// </summary>
  public enum TestEnum {
    /// <summary>
    ///第一个常量必须映射到0
    /// </summary>
    [pbr::OriginalName("NORMAL")] Normal = 0,
    [pbr::OriginalName("BOSS")] Boss = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  ///消息类 4
  /// </summary>
  public sealed partial class TestMsg : pb::IMessage<TestMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TestMsg> _parser = new pb::MessageParser<TestMsg>(() => new TestMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TestMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePlayerTest.TestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TestMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TestMsg(TestMsg other) : this() {
      _hasBits0 = other._hasBits0;
      testD_ = other.testD_;
      testInt_ = other.testInt_;
      testLong_ = other.testLong_;
      testS32_ = other.testS32_;
      testS364_ = other.testS364_;
      testU32_ = other.testU32_;
      testU64_ = other.testU64_;
      testFixed32_ = other.testFixed32_;
      testFixed64_ = other.testFixed64_;
      testsfixed32_ = other.testsfixed32_;
      testsfixed64_ = other.testsfixed64_;
      testBool_ = other.testBool_;
      testString_ = other.testString_;
      testBytes_ = other.testBytes_;
      listInt_ = other.listInt_.Clone();
      testMap_ = other.testMap_.Clone();
      testEnum_ = other.testEnum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TestMsg Clone() {
      return new TestMsg(this);
    }

    /// <summary>Field number for the "testD" field.</summary>
    public const int TestDFieldNumber = 3;
    private double testD_;
    /// <summary>
    ///浮点数 等号后面代表变量的唯一编号
    ///float testF = 1;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TestD {
      get { if ((_hasBits0 & 1) != 0) { return testD_; } else { return 0D; } }
      set {
        _hasBits0 |= 1;
        testD_ = value;
      }
    }
    /// <summary>Gets whether the "testD" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTestD {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "testD" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTestD() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "testInt" field.</summary>
    public const int TestIntFieldNumber = 4;
    private int testInt_;
    /// <summary>
    ///变长编码
    ///所谓变长就是会根据数字大小 来使用对应的字节数存储
    ///protobuf帮助我们优化的部分 可尽量使用少的字节数 来存储
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TestInt {
      get { return testInt_; }
      set {
        testInt_ = value;
      }
    }

    /// <summary>Field number for the "testLong" field.</summary>
    public const int TestLongFieldNumber = 5;
    private long testLong_;
    /// <summary>
    ///1 2 4 8
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TestLong {
      get { return testLong_; }
      set {
        testLong_ = value;
      }
    }

    /// <summary>Field number for the "testS32" field.</summary>
    public const int TestS32FieldNumber = 6;
    private int testS32_;
    /// <summary>
    ///更适用于表示负数类型整数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TestS32 {
      get { return testS32_; }
      set {
        testS32_ = value;
      }
    }

    /// <summary>Field number for the "testS364" field.</summary>
    public const int TestS364FieldNumber = 7;
    private long testS364_;
    /// <summary>
    ///C# - long 适用于表示负数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TestS364 {
      get { return testS364_; }
      set {
        testS364_ = value;
      }
    }

    /// <summary>Field number for the "testU32" field.</summary>
    public const int TestU32FieldNumber = 8;
    private uint testU32_;
    /// <summary>
    ///无符号变长编码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint TestU32 {
      get { return testU32_; }
      set {
        testU32_ = value;
      }
    }

    /// <summary>Field number for the "testU64" field.</summary>
    public const int TestU64FieldNumber = 9;
    private ulong testU64_;
    /// <summary>
    ///C# - ulong 变长的编码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong TestU64 {
      get { return testU64_; }
      set {
        testU64_ = value;
      }
    }

    /// <summary>Field number for the "testFixed32" field.</summary>
    public const int TestFixed32FieldNumber = 10;
    private uint testFixed32_;
    /// <summary>
    ///固定字节数的类型
    ///通常用来表示大于2的28次方的数 比uint32更有效 始终是4个字节
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint TestFixed32 {
      get { return testFixed32_; }
      set {
        testFixed32_ = value;
      }
    }

    /// <summary>Field number for the "testFixed64" field.</summary>
    public const int TestFixed64FieldNumber = 11;
    private ulong testFixed64_;
    /// <summary>
    ///通常用来表示大于2的56次方的数 比uint64更有效 始终是8个字节
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong TestFixed64 {
      get { return testFixed64_; }
      set {
        testFixed64_ = value;
      }
    }

    /// <summary>Field number for the "testsfixed32" field.</summary>
    public const int Testsfixed32FieldNumber = 12;
    private int testsfixed32_;
    /// <summary>
    ///C# - int 始终是4个字节
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Testsfixed32 {
      get { return testsfixed32_; }
      set {
        testsfixed32_ = value;
      }
    }

    /// <summary>Field number for the "testsfixed64" field.</summary>
    public const int Testsfixed64FieldNumber = 13;
    private long testsfixed64_;
    /// <summary>
    ///C# - long 始终是8个字节
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Testsfixed64 {
      get { return testsfixed64_; }
      set {
        testsfixed64_ = value;
      }
    }

    /// <summary>Field number for the "testBool" field.</summary>
    public const int TestBoolFieldNumber = 14;
    private bool testBool_;
    /// <summary>
    ///其他类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool TestBool {
      get { return testBool_; }
      set {
        testBool_ = value;
      }
    }

    /// <summary>Field number for the "testString" field.</summary>
    public const int TestStringFieldNumber = 15;
    private string testString_ = "";
    /// <summary>
    ///C# - string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TestString {
      get { return testString_; }
      set {
        testString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "testBytes" field.</summary>
    public const int TestBytesFieldNumber = 16;
    private pb::ByteString testBytes_ = pb::ByteString.Empty;
    /// <summary>
    ///新的类型 protobuf自己实现的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString TestBytes {
      get { return testBytes_; }
      set {
        testBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "listInt" field.</summary>
    public const int ListIntFieldNumber = 17;
    private static readonly pb::FieldCodec<int> _repeated_listInt_codec
        = pb::FieldCodec.ForInt32(138);
    private readonly pbc::RepeatedField<int> listInt_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///数组List
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> ListInt {
      get { return listInt_; }
    }

    /// <summary>Field number for the "testMap" field.</summary>
    public const int TestMapFieldNumber = 18;
    private static readonly pbc::MapField<int, string>.Codec _map_testMap_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForString(18, ""), 146);
    private readonly pbc::MapField<int, string> testMap_ = new pbc::MapField<int, string>();
    /// <summary>
    ///字典 Dictionary
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<int, string> TestMap {
      get { return testMap_; }
    }

    /// <summary>Field number for the "testEnum" field.</summary>
    public const int TestEnumFieldNumber = 19;
    private global::GamePlayerTest.TestEnum testEnum_ = global::GamePlayerTest.TestEnum.Normal;
    /// <summary>
    ///枚举成员变量的声明 需要唯一标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::GamePlayerTest.TestEnum TestEnum {
      get { return testEnum_; }
      set {
        testEnum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TestMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TestMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TestD, other.TestD)) return false;
      if (TestInt != other.TestInt) return false;
      if (TestLong != other.TestLong) return false;
      if (TestS32 != other.TestS32) return false;
      if (TestS364 != other.TestS364) return false;
      if (TestU32 != other.TestU32) return false;
      if (TestU64 != other.TestU64) return false;
      if (TestFixed32 != other.TestFixed32) return false;
      if (TestFixed64 != other.TestFixed64) return false;
      if (Testsfixed32 != other.Testsfixed32) return false;
      if (Testsfixed64 != other.Testsfixed64) return false;
      if (TestBool != other.TestBool) return false;
      if (TestString != other.TestString) return false;
      if (TestBytes != other.TestBytes) return false;
      if(!listInt_.Equals(other.listInt_)) return false;
      if (!TestMap.Equals(other.TestMap)) return false;
      if (TestEnum != other.TestEnum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTestD) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TestD);
      if (TestInt != 0) hash ^= TestInt.GetHashCode();
      if (TestLong != 0L) hash ^= TestLong.GetHashCode();
      if (TestS32 != 0) hash ^= TestS32.GetHashCode();
      if (TestS364 != 0L) hash ^= TestS364.GetHashCode();
      if (TestU32 != 0) hash ^= TestU32.GetHashCode();
      if (TestU64 != 0UL) hash ^= TestU64.GetHashCode();
      if (TestFixed32 != 0) hash ^= TestFixed32.GetHashCode();
      if (TestFixed64 != 0UL) hash ^= TestFixed64.GetHashCode();
      if (Testsfixed32 != 0) hash ^= Testsfixed32.GetHashCode();
      if (Testsfixed64 != 0L) hash ^= Testsfixed64.GetHashCode();
      if (TestBool != false) hash ^= TestBool.GetHashCode();
      if (TestString.Length != 0) hash ^= TestString.GetHashCode();
      if (TestBytes.Length != 0) hash ^= TestBytes.GetHashCode();
      hash ^= listInt_.GetHashCode();
      hash ^= TestMap.GetHashCode();
      if (TestEnum != global::GamePlayerTest.TestEnum.Normal) hash ^= TestEnum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTestD) {
        output.WriteRawTag(25);
        output.WriteDouble(TestD);
      }
      if (TestInt != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TestInt);
      }
      if (TestLong != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TestLong);
      }
      if (TestS32 != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(TestS32);
      }
      if (TestS364 != 0L) {
        output.WriteRawTag(56);
        output.WriteSInt64(TestS364);
      }
      if (TestU32 != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(TestU32);
      }
      if (TestU64 != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(TestU64);
      }
      if (TestFixed32 != 0) {
        output.WriteRawTag(85);
        output.WriteFixed32(TestFixed32);
      }
      if (TestFixed64 != 0UL) {
        output.WriteRawTag(89);
        output.WriteFixed64(TestFixed64);
      }
      if (Testsfixed32 != 0) {
        output.WriteRawTag(101);
        output.WriteSFixed32(Testsfixed32);
      }
      if (Testsfixed64 != 0L) {
        output.WriteRawTag(105);
        output.WriteSFixed64(Testsfixed64);
      }
      if (TestBool != false) {
        output.WriteRawTag(112);
        output.WriteBool(TestBool);
      }
      if (TestString.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(TestString);
      }
      if (TestBytes.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(TestBytes);
      }
      listInt_.WriteTo(output, _repeated_listInt_codec);
      testMap_.WriteTo(output, _map_testMap_codec);
      if (TestEnum != global::GamePlayerTest.TestEnum.Normal) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) TestEnum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTestD) {
        output.WriteRawTag(25);
        output.WriteDouble(TestD);
      }
      if (TestInt != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TestInt);
      }
      if (TestLong != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TestLong);
      }
      if (TestS32 != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(TestS32);
      }
      if (TestS364 != 0L) {
        output.WriteRawTag(56);
        output.WriteSInt64(TestS364);
      }
      if (TestU32 != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(TestU32);
      }
      if (TestU64 != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(TestU64);
      }
      if (TestFixed32 != 0) {
        output.WriteRawTag(85);
        output.WriteFixed32(TestFixed32);
      }
      if (TestFixed64 != 0UL) {
        output.WriteRawTag(89);
        output.WriteFixed64(TestFixed64);
      }
      if (Testsfixed32 != 0) {
        output.WriteRawTag(101);
        output.WriteSFixed32(Testsfixed32);
      }
      if (Testsfixed64 != 0L) {
        output.WriteRawTag(105);
        output.WriteSFixed64(Testsfixed64);
      }
      if (TestBool != false) {
        output.WriteRawTag(112);
        output.WriteBool(TestBool);
      }
      if (TestString.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(TestString);
      }
      if (TestBytes.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(TestBytes);
      }
      listInt_.WriteTo(ref output, _repeated_listInt_codec);
      testMap_.WriteTo(ref output, _map_testMap_codec);
      if (TestEnum != global::GamePlayerTest.TestEnum.Normal) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) TestEnum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTestD) {
        size += 1 + 8;
      }
      if (TestInt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TestInt);
      }
      if (TestLong != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TestLong);
      }
      if (TestS32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TestS32);
      }
      if (TestS364 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TestS364);
      }
      if (TestU32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TestU32);
      }
      if (TestU64 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TestU64);
      }
      if (TestFixed32 != 0) {
        size += 1 + 4;
      }
      if (TestFixed64 != 0UL) {
        size += 1 + 8;
      }
      if (Testsfixed32 != 0) {
        size += 1 + 4;
      }
      if (Testsfixed64 != 0L) {
        size += 1 + 8;
      }
      if (TestBool != false) {
        size += 1 + 1;
      }
      if (TestString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestString);
      }
      if (TestBytes.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(TestBytes);
      }
      size += listInt_.CalculateSize(_repeated_listInt_codec);
      size += testMap_.CalculateSize(_map_testMap_codec);
      if (TestEnum != global::GamePlayerTest.TestEnum.Normal) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TestEnum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TestMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasTestD) {
        TestD = other.TestD;
      }
      if (other.TestInt != 0) {
        TestInt = other.TestInt;
      }
      if (other.TestLong != 0L) {
        TestLong = other.TestLong;
      }
      if (other.TestS32 != 0) {
        TestS32 = other.TestS32;
      }
      if (other.TestS364 != 0L) {
        TestS364 = other.TestS364;
      }
      if (other.TestU32 != 0) {
        TestU32 = other.TestU32;
      }
      if (other.TestU64 != 0UL) {
        TestU64 = other.TestU64;
      }
      if (other.TestFixed32 != 0) {
        TestFixed32 = other.TestFixed32;
      }
      if (other.TestFixed64 != 0UL) {
        TestFixed64 = other.TestFixed64;
      }
      if (other.Testsfixed32 != 0) {
        Testsfixed32 = other.Testsfixed32;
      }
      if (other.Testsfixed64 != 0L) {
        Testsfixed64 = other.Testsfixed64;
      }
      if (other.TestBool != false) {
        TestBool = other.TestBool;
      }
      if (other.TestString.Length != 0) {
        TestString = other.TestString;
      }
      if (other.TestBytes.Length != 0) {
        TestBytes = other.TestBytes;
      }
      listInt_.Add(other.listInt_);
      testMap_.Add(other.testMap_);
      if (other.TestEnum != global::GamePlayerTest.TestEnum.Normal) {
        TestEnum = other.TestEnum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 25: {
            TestD = input.ReadDouble();
            break;
          }
          case 32: {
            TestInt = input.ReadInt32();
            break;
          }
          case 40: {
            TestLong = input.ReadInt64();
            break;
          }
          case 48: {
            TestS32 = input.ReadSInt32();
            break;
          }
          case 56: {
            TestS364 = input.ReadSInt64();
            break;
          }
          case 64: {
            TestU32 = input.ReadUInt32();
            break;
          }
          case 72: {
            TestU64 = input.ReadUInt64();
            break;
          }
          case 85: {
            TestFixed32 = input.ReadFixed32();
            break;
          }
          case 89: {
            TestFixed64 = input.ReadFixed64();
            break;
          }
          case 101: {
            Testsfixed32 = input.ReadSFixed32();
            break;
          }
          case 105: {
            Testsfixed64 = input.ReadSFixed64();
            break;
          }
          case 112: {
            TestBool = input.ReadBool();
            break;
          }
          case 122: {
            TestString = input.ReadString();
            break;
          }
          case 130: {
            TestBytes = input.ReadBytes();
            break;
          }
          case 138:
          case 136: {
            listInt_.AddEntriesFrom(input, _repeated_listInt_codec);
            break;
          }
          case 146: {
            testMap_.AddEntriesFrom(input, _map_testMap_codec);
            break;
          }
          case 152: {
            TestEnum = (global::GamePlayerTest.TestEnum) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 25: {
            TestD = input.ReadDouble();
            break;
          }
          case 32: {
            TestInt = input.ReadInt32();
            break;
          }
          case 40: {
            TestLong = input.ReadInt64();
            break;
          }
          case 48: {
            TestS32 = input.ReadSInt32();
            break;
          }
          case 56: {
            TestS364 = input.ReadSInt64();
            break;
          }
          case 64: {
            TestU32 = input.ReadUInt32();
            break;
          }
          case 72: {
            TestU64 = input.ReadUInt64();
            break;
          }
          case 85: {
            TestFixed32 = input.ReadFixed32();
            break;
          }
          case 89: {
            TestFixed64 = input.ReadFixed64();
            break;
          }
          case 101: {
            Testsfixed32 = input.ReadSFixed32();
            break;
          }
          case 105: {
            Testsfixed64 = input.ReadSFixed64();
            break;
          }
          case 112: {
            TestBool = input.ReadBool();
            break;
          }
          case 122: {
            TestString = input.ReadString();
            break;
          }
          case 130: {
            TestBytes = input.ReadBytes();
            break;
          }
          case 138:
          case 136: {
            listInt_.AddEntriesFrom(ref input, _repeated_listInt_codec);
            break;
          }
          case 146: {
            testMap_.AddEntriesFrom(ref input, _map_testMap_codec);
            break;
          }
          case 152: {
            TestEnum = (global::GamePlayerTest.TestEnum) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
