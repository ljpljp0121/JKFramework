// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace GamePlayerTest {
PROTOBUF_CONSTEXPR TestMsg_TestMapEntry_DoNotUse::TestMsg_TestMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestMsg_TestMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMsg_TestMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMsg_TestMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMsg_TestMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMsg_TestMapEntry_DoNotUseDefaultTypeInternal _TestMsg_TestMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMsg::TestMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.listint_)*/{}
  , /*decltype(_impl_._listint_cached_byte_size_)*/{0}
  , /*decltype(_impl_.testmap_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.teststring_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.testbytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.testd_)*/0
  , /*decltype(_impl_.testlong_)*/int64_t{0}
  , /*decltype(_impl_.testint_)*/0
  , /*decltype(_impl_.tests32_)*/0
  , /*decltype(_impl_.tests364_)*/int64_t{0}
  , /*decltype(_impl_.testu64_)*/uint64_t{0u}
  , /*decltype(_impl_.testu32_)*/0u
  , /*decltype(_impl_.testfixed32_)*/0u
  , /*decltype(_impl_.testfixed64_)*/uint64_t{0u}
  , /*decltype(_impl_.testsfixed64_)*/int64_t{0}
  , /*decltype(_impl_.testsfixed32_)*/0
  , /*decltype(_impl_.testbool_)*/false
  , /*decltype(_impl_.testenum_)*/0} {}
struct TestMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMsgDefaultTypeInternal() {}
  union {
    TestMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMsgDefaultTypeInternal _TestMsg_default_instance_;
}  // namespace GamePlayerTest
static ::_pb::Metadata file_level_metadata_test_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_test_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_test_2eproto = nullptr;

const uint32_t TableStruct_test_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg_TestMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg_TestMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg_TestMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg_TestMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testd_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testint_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testlong_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.tests32_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.tests364_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testu32_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testu64_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testfixed32_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testfixed64_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testsfixed32_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testsfixed64_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testbool_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.teststring_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testbytes_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.listint_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testmap_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testenum_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::GamePlayerTest::TestMsg_TestMapEntry_DoNotUse)},
  { 10, 33, -1, sizeof(::GamePlayerTest::TestMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::GamePlayerTest::_TestMsg_TestMapEntry_DoNotUse_default_instance_._instance,
  &::GamePlayerTest::_TestMsg_default_instance_._instance,
};

const char descriptor_table_protodef_test_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntest.proto\022\016GamePlayerTest\"\310\003\n\007TestMsg"
  "\022\022\n\005testD\030\003 \001(\001H\000\210\001\001\022\017\n\007testInt\030\004 \001(\005\022\020\n"
  "\010testLong\030\005 \001(\003\022\017\n\007testS32\030\006 \001(\021\022\020\n\010test"
  "S364\030\007 \001(\022\022\017\n\007testU32\030\010 \001(\r\022\017\n\007testU64\030\t"
  " \001(\004\022\023\n\013testFixed32\030\n \001(\007\022\023\n\013testFixed64"
  "\030\013 \001(\006\022\024\n\014testsfixed32\030\014 \001(\017\022\024\n\014testsfix"
  "ed64\030\r \001(\020\022\020\n\010testBool\030\016 \001(\010\022\022\n\ntestStri"
  "ng\030\017 \001(\t\022\021\n\ttestBytes\030\020 \001(\014\022\017\n\007listInt\030\021"
  " \003(\005\0225\n\007testMap\030\022 \003(\0132$.GamePlayerTest.T"
  "estMsg.TestMapEntry\022*\n\010testEnum\030\023 \001(\0162\030."
  "GamePlayerTest.TestEnum\032.\n\014TestMapEntry\022"
  "\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:\0028\001B\010\n\006_test"
  "DJ\004\010\024\020\025* \n\010TestEnum\022\n\n\006NORMAL\020\000\022\010\n\004BOSS\020"
  "\005b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_test_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_test_2eproto = {
    false, false, 529, descriptor_table_protodef_test_2eproto,
    "test.proto",
    &descriptor_table_test_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_test_2eproto::offsets,
    file_level_metadata_test_2eproto, file_level_enum_descriptors_test_2eproto,
    file_level_service_descriptors_test_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_test_2eproto_getter() {
  return &descriptor_table_test_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_test_2eproto(&descriptor_table_test_2eproto);
namespace GamePlayerTest {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_test_2eproto);
  return file_level_enum_descriptors_test_2eproto[0];
}
bool TestEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

TestMsg_TestMapEntry_DoNotUse::TestMsg_TestMapEntry_DoNotUse() {}
TestMsg_TestMapEntry_DoNotUse::TestMsg_TestMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMsg_TestMapEntry_DoNotUse::MergeFrom(const TestMsg_TestMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMsg_TestMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[0]);
}

// ===================================================================

class TestMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMsg>()._impl_._has_bits_);
  static void set_has_testd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestMsg::TestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TestMsg::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:GamePlayerTest.TestMsg)
}
TestMsg::TestMsg(const TestMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.listint_){from._impl_.listint_}
    , /*decltype(_impl_._listint_cached_byte_size_)*/{0}
    , /*decltype(_impl_.testmap_)*/{}
    , decltype(_impl_.teststring_){}
    , decltype(_impl_.testbytes_){}
    , decltype(_impl_.testd_){}
    , decltype(_impl_.testlong_){}
    , decltype(_impl_.testint_){}
    , decltype(_impl_.tests32_){}
    , decltype(_impl_.tests364_){}
    , decltype(_impl_.testu64_){}
    , decltype(_impl_.testu32_){}
    , decltype(_impl_.testfixed32_){}
    , decltype(_impl_.testfixed64_){}
    , decltype(_impl_.testsfixed64_){}
    , decltype(_impl_.testsfixed32_){}
    , decltype(_impl_.testbool_){}
    , decltype(_impl_.testenum_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.testmap_.MergeFrom(from._impl_.testmap_);
  _impl_.teststring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.teststring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_teststring().empty()) {
    _this->_impl_.teststring_.Set(from._internal_teststring(), 
      _this->GetArenaForAllocation());
  }
  _impl_.testbytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testbytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_testbytes().empty()) {
    _this->_impl_.testbytes_.Set(from._internal_testbytes(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.testd_, &from._impl_.testd_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.testenum_) -
    reinterpret_cast<char*>(&_impl_.testd_)) + sizeof(_impl_.testenum_));
  // @@protoc_insertion_point(copy_constructor:GamePlayerTest.TestMsg)
}

inline void TestMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.listint_){arena}
    , /*decltype(_impl_._listint_cached_byte_size_)*/{0}
    , /*decltype(_impl_.testmap_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.teststring_){}
    , decltype(_impl_.testbytes_){}
    , decltype(_impl_.testd_){0}
    , decltype(_impl_.testlong_){int64_t{0}}
    , decltype(_impl_.testint_){0}
    , decltype(_impl_.tests32_){0}
    , decltype(_impl_.tests364_){int64_t{0}}
    , decltype(_impl_.testu64_){uint64_t{0u}}
    , decltype(_impl_.testu32_){0u}
    , decltype(_impl_.testfixed32_){0u}
    , decltype(_impl_.testfixed64_){uint64_t{0u}}
    , decltype(_impl_.testsfixed64_){int64_t{0}}
    , decltype(_impl_.testsfixed32_){0}
    , decltype(_impl_.testbool_){false}
    , decltype(_impl_.testenum_){0}
  };
  _impl_.teststring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.teststring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.testbytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testbytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestMsg::~TestMsg() {
  // @@protoc_insertion_point(destructor:GamePlayerTest.TestMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TestMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.listint_.~RepeatedField();
  _impl_.testmap_.Destruct();
  _impl_.testmap_.~MapField();
  _impl_.teststring_.Destroy();
  _impl_.testbytes_.Destroy();
}

void TestMsg::ArenaDtor(void* object) {
  TestMsg* _this = reinterpret_cast< TestMsg* >(object);
  _this->_impl_.testmap_.Destruct();
}
void TestMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePlayerTest.TestMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.listint_.Clear();
  _impl_.testmap_.Clear();
  _impl_.teststring_.ClearToEmpty();
  _impl_.testbytes_.ClearToEmpty();
  _impl_.testd_ = 0;
  ::memset(&_impl_.testlong_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.testenum_) -
      reinterpret_cast<char*>(&_impl_.testlong_)) + sizeof(_impl_.testenum_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double testD = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_testd(&has_bits);
          _impl_.testd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 testInt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.testint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 testLong = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.testlong_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 testS32 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.tests32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 testS364 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.tests364_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 testU32 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.testu32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 testU64 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.testu64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed32 testFixed32 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.testfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // fixed64 testFixed64 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.testfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed32 testsfixed32 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.testsfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed64 testsfixed64 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.testsfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // bool testBool = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.testbool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string testString = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_teststring();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GamePlayerTest.TestMsg.testString"));
        } else
          goto handle_unusual;
        continue;
      // bytes testBytes = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_testbytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 listInt = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_listint(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 136) {
          _internal_add_listint(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, string> testMap = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.testmap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .GamePlayerTest.TestEnum testEnum = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_testenum(static_cast<::GamePlayerTest::TestEnum>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GamePlayerTest.TestMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional double testD = 3;
  if (_internal_has_testd()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_testd(), target);
  }

  // int32 testInt = 4;
  if (this->_internal_testint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_testint(), target);
  }

  // int64 testLong = 5;
  if (this->_internal_testlong() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_testlong(), target);
  }

  // sint32 testS32 = 6;
  if (this->_internal_tests32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(6, this->_internal_tests32(), target);
  }

  // sint64 testS364 = 7;
  if (this->_internal_tests364() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(7, this->_internal_tests364(), target);
  }

  // uint32 testU32 = 8;
  if (this->_internal_testu32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_testu32(), target);
  }

  // uint64 testU64 = 9;
  if (this->_internal_testu64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_testu64(), target);
  }

  // fixed32 testFixed32 = 10;
  if (this->_internal_testfixed32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(10, this->_internal_testfixed32(), target);
  }

  // fixed64 testFixed64 = 11;
  if (this->_internal_testfixed64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(11, this->_internal_testfixed64(), target);
  }

  // sfixed32 testsfixed32 = 12;
  if (this->_internal_testsfixed32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(12, this->_internal_testsfixed32(), target);
  }

  // sfixed64 testsfixed64 = 13;
  if (this->_internal_testsfixed64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(13, this->_internal_testsfixed64(), target);
  }

  // bool testBool = 14;
  if (this->_internal_testbool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_testbool(), target);
  }

  // string testString = 15;
  if (!this->_internal_teststring().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_teststring().data(), static_cast<int>(this->_internal_teststring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GamePlayerTest.TestMsg.testString");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_teststring(), target);
  }

  // bytes testBytes = 16;
  if (!this->_internal_testbytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_testbytes(), target);
  }

  // repeated int32 listInt = 17;
  {
    int byte_size = _impl_._listint_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          17, _internal_listint(), byte_size, target);
    }
  }

  // map<int32, string> testMap = 18;
  if (!this->_internal_testmap().empty()) {
    using MapType = ::_pb::Map<int32_t, std::string>;
    using WireHelper = TestMsg_TestMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_testmap();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "GamePlayerTest.TestMsg.TestMapEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(18, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(18, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .GamePlayerTest.TestEnum testEnum = 19;
  if (this->_internal_testenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      19, this->_internal_testenum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GamePlayerTest.TestMsg)
  return target;
}

size_t TestMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePlayerTest.TestMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 listInt = 17;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.listint_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._listint_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<int32, string> testMap = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_testmap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::const_iterator
      it = this->_internal_testmap().begin();
      it != this->_internal_testmap().end(); ++it) {
    total_size += TestMsg_TestMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string testString = 15;
  if (!this->_internal_teststring().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_teststring());
  }

  // bytes testBytes = 16;
  if (!this->_internal_testbytes().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_testbytes());
  }

  // optional double testD = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  // int64 testLong = 5;
  if (this->_internal_testlong() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_testlong());
  }

  // int32 testInt = 4;
  if (this->_internal_testint() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_testint());
  }

  // sint32 testS32 = 6;
  if (this->_internal_tests32() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_tests32());
  }

  // sint64 testS364 = 7;
  if (this->_internal_tests364() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_tests364());
  }

  // uint64 testU64 = 9;
  if (this->_internal_testu64() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_testu64());
  }

  // uint32 testU32 = 8;
  if (this->_internal_testu32() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_testu32());
  }

  // fixed32 testFixed32 = 10;
  if (this->_internal_testfixed32() != 0) {
    total_size += 1 + 4;
  }

  // fixed64 testFixed64 = 11;
  if (this->_internal_testfixed64() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 testsfixed64 = 13;
  if (this->_internal_testsfixed64() != 0) {
    total_size += 1 + 8;
  }

  // sfixed32 testsfixed32 = 12;
  if (this->_internal_testsfixed32() != 0) {
    total_size += 1 + 4;
  }

  // bool testBool = 14;
  if (this->_internal_testbool() != 0) {
    total_size += 1 + 1;
  }

  // .GamePlayerTest.TestEnum testEnum = 19;
  if (this->_internal_testenum() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_testenum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMsg::GetClassData() const { return &_class_data_; }


void TestMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestMsg*>(&to_msg);
  auto& from = static_cast<const TestMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GamePlayerTest.TestMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.listint_.MergeFrom(from._impl_.listint_);
  _this->_impl_.testmap_.MergeFrom(from._impl_.testmap_);
  if (!from._internal_teststring().empty()) {
    _this->_internal_set_teststring(from._internal_teststring());
  }
  if (!from._internal_testbytes().empty()) {
    _this->_internal_set_testbytes(from._internal_testbytes());
  }
  if (from._internal_has_testd()) {
    _this->_internal_set_testd(from._internal_testd());
  }
  if (from._internal_testlong() != 0) {
    _this->_internal_set_testlong(from._internal_testlong());
  }
  if (from._internal_testint() != 0) {
    _this->_internal_set_testint(from._internal_testint());
  }
  if (from._internal_tests32() != 0) {
    _this->_internal_set_tests32(from._internal_tests32());
  }
  if (from._internal_tests364() != 0) {
    _this->_internal_set_tests364(from._internal_tests364());
  }
  if (from._internal_testu64() != 0) {
    _this->_internal_set_testu64(from._internal_testu64());
  }
  if (from._internal_testu32() != 0) {
    _this->_internal_set_testu32(from._internal_testu32());
  }
  if (from._internal_testfixed32() != 0) {
    _this->_internal_set_testfixed32(from._internal_testfixed32());
  }
  if (from._internal_testfixed64() != 0) {
    _this->_internal_set_testfixed64(from._internal_testfixed64());
  }
  if (from._internal_testsfixed64() != 0) {
    _this->_internal_set_testsfixed64(from._internal_testsfixed64());
  }
  if (from._internal_testsfixed32() != 0) {
    _this->_internal_set_testsfixed32(from._internal_testsfixed32());
  }
  if (from._internal_testbool() != 0) {
    _this->_internal_set_testbool(from._internal_testbool());
  }
  if (from._internal_testenum() != 0) {
    _this->_internal_set_testenum(from._internal_testenum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMsg::CopyFrom(const TestMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePlayerTest.TestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg::IsInitialized() const {
  return true;
}

void TestMsg::InternalSwap(TestMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.listint_.InternalSwap(&other->_impl_.listint_);
  _impl_.testmap_.InternalSwap(&other->_impl_.testmap_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.teststring_, lhs_arena,
      &other->_impl_.teststring_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.testbytes_, lhs_arena,
      &other->_impl_.testbytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMsg, _impl_.testenum_)
      + sizeof(TestMsg::_impl_.testenum_)
      - PROTOBUF_FIELD_OFFSET(TestMsg, _impl_.testd_)>(
          reinterpret_cast<char*>(&_impl_.testd_),
          reinterpret_cast<char*>(&other->_impl_.testd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace GamePlayerTest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GamePlayerTest::TestMsg_TestMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::GamePlayerTest::TestMsg_TestMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GamePlayerTest::TestMsg_TestMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::GamePlayerTest::TestMsg*
Arena::CreateMaybeMessage< ::GamePlayerTest::TestMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GamePlayerTest::TestMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
