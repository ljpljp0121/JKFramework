// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace GamePlayerTest {
class TestMsg;
struct TestMsgDefaultTypeInternal;
extern TestMsgDefaultTypeInternal _TestMsg_default_instance_;
class TestMsg_TestMapEntry_DoNotUse;
struct TestMsg_TestMapEntry_DoNotUseDefaultTypeInternal;
extern TestMsg_TestMapEntry_DoNotUseDefaultTypeInternal _TestMsg_TestMapEntry_DoNotUse_default_instance_;
}  // namespace GamePlayerTest
PROTOBUF_NAMESPACE_OPEN
template<> ::GamePlayerTest::TestMsg* Arena::CreateMaybeMessage<::GamePlayerTest::TestMsg>(Arena*);
template<> ::GamePlayerTest::TestMsg_TestMapEntry_DoNotUse* Arena::CreateMaybeMessage<::GamePlayerTest::TestMsg_TestMapEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace GamePlayerTest {

enum TestEnum : int {
  NORMAL = 0,
  BOSS = 5,
  TestEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TestEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TestEnum_IsValid(int value);
constexpr TestEnum TestEnum_MIN = NORMAL;
constexpr TestEnum TestEnum_MAX = BOSS;
constexpr int TestEnum_ARRAYSIZE = TestEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestEnum_descriptor();
template<typename T>
inline const std::string& TestEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TestEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TestEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TestEnum_descriptor(), enum_t_value);
}
inline bool TestEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TestEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TestEnum>(
    TestEnum_descriptor(), name, value);
}
// ===================================================================

class TestMsg_TestMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestMsg_TestMapEntry_DoNotUse, 
    int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestMsg_TestMapEntry_DoNotUse, 
    int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  TestMsg_TestMapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestMsg_TestMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestMsg_TestMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestMsg_TestMapEntry_DoNotUse& other);
  static const TestMsg_TestMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestMsg_TestMapEntry_DoNotUse*>(&_TestMsg_TestMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "GamePlayerTest.TestMsg.TestMapEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_test_2eproto;
};

// -------------------------------------------------------------------

class TestMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GamePlayerTest.TestMsg) */ {
 public:
  inline TestMsg() : TestMsg(nullptr) {}
  ~TestMsg() override;
  explicit PROTOBUF_CONSTEXPR TestMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMsg(const TestMsg& from);
  TestMsg(TestMsg&& from) noexcept
    : TestMsg() {
    *this = ::std::move(from);
  }

  inline TestMsg& operator=(const TestMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMsg& operator=(TestMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMsg* internal_default_instance() {
    return reinterpret_cast<const TestMsg*>(
               &_TestMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestMsg& a, TestMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestMsg& from) {
    TestMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GamePlayerTest.TestMsg";
  }
  protected:
  explicit TestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kListIntFieldNumber = 17,
    kTestMapFieldNumber = 18,
    kTestStringFieldNumber = 15,
    kTestBytesFieldNumber = 16,
    kTestDFieldNumber = 3,
    kTestLongFieldNumber = 5,
    kTestIntFieldNumber = 4,
    kTestS32FieldNumber = 6,
    kTestS364FieldNumber = 7,
    kTestU64FieldNumber = 9,
    kTestU32FieldNumber = 8,
    kTestFixed32FieldNumber = 10,
    kTestFixed64FieldNumber = 11,
    kTestsfixed64FieldNumber = 13,
    kTestsfixed32FieldNumber = 12,
    kTestBoolFieldNumber = 14,
    kTestEnumFieldNumber = 19,
  };
  // repeated int32 listInt = 17;
  int listint_size() const;
  private:
  int _internal_listint_size() const;
  public:
  void clear_listint();
  private:
  int32_t _internal_listint(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_listint() const;
  void _internal_add_listint(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_listint();
  public:
  int32_t listint(int index) const;
  void set_listint(int index, int32_t value);
  void add_listint(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      listint() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_listint();

  // map<int32, string> testMap = 18;
  int testmap_size() const;
  private:
  int _internal_testmap_size() const;
  public:
  void clear_testmap();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
      _internal_testmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
      _internal_mutable_testmap();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
      testmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
      mutable_testmap();

  // string testString = 15;
  void clear_teststring();
  const std::string& teststring() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_teststring(ArgT0&& arg0, ArgT... args);
  std::string* mutable_teststring();
  PROTOBUF_NODISCARD std::string* release_teststring();
  void set_allocated_teststring(std::string* teststring);
  private:
  const std::string& _internal_teststring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_teststring(const std::string& value);
  std::string* _internal_mutable_teststring();
  public:

  // bytes testBytes = 16;
  void clear_testbytes();
  const std::string& testbytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_testbytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_testbytes();
  PROTOBUF_NODISCARD std::string* release_testbytes();
  void set_allocated_testbytes(std::string* testbytes);
  private:
  const std::string& _internal_testbytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_testbytes(const std::string& value);
  std::string* _internal_mutable_testbytes();
  public:

  // optional double testD = 3;
  bool has_testd() const;
  private:
  bool _internal_has_testd() const;
  public:
  void clear_testd();
  double testd() const;
  void set_testd(double value);
  private:
  double _internal_testd() const;
  void _internal_set_testd(double value);
  public:

  // int64 testLong = 5;
  void clear_testlong();
  int64_t testlong() const;
  void set_testlong(int64_t value);
  private:
  int64_t _internal_testlong() const;
  void _internal_set_testlong(int64_t value);
  public:

  // int32 testInt = 4;
  void clear_testint();
  int32_t testint() const;
  void set_testint(int32_t value);
  private:
  int32_t _internal_testint() const;
  void _internal_set_testint(int32_t value);
  public:

  // sint32 testS32 = 6;
  void clear_tests32();
  int32_t tests32() const;
  void set_tests32(int32_t value);
  private:
  int32_t _internal_tests32() const;
  void _internal_set_tests32(int32_t value);
  public:

  // sint64 testS364 = 7;
  void clear_tests364();
  int64_t tests364() const;
  void set_tests364(int64_t value);
  private:
  int64_t _internal_tests364() const;
  void _internal_set_tests364(int64_t value);
  public:

  // uint64 testU64 = 9;
  void clear_testu64();
  uint64_t testu64() const;
  void set_testu64(uint64_t value);
  private:
  uint64_t _internal_testu64() const;
  void _internal_set_testu64(uint64_t value);
  public:

  // uint32 testU32 = 8;
  void clear_testu32();
  uint32_t testu32() const;
  void set_testu32(uint32_t value);
  private:
  uint32_t _internal_testu32() const;
  void _internal_set_testu32(uint32_t value);
  public:

  // fixed32 testFixed32 = 10;
  void clear_testfixed32();
  uint32_t testfixed32() const;
  void set_testfixed32(uint32_t value);
  private:
  uint32_t _internal_testfixed32() const;
  void _internal_set_testfixed32(uint32_t value);
  public:

  // fixed64 testFixed64 = 11;
  void clear_testfixed64();
  uint64_t testfixed64() const;
  void set_testfixed64(uint64_t value);
  private:
  uint64_t _internal_testfixed64() const;
  void _internal_set_testfixed64(uint64_t value);
  public:

  // sfixed64 testsfixed64 = 13;
  void clear_testsfixed64();
  int64_t testsfixed64() const;
  void set_testsfixed64(int64_t value);
  private:
  int64_t _internal_testsfixed64() const;
  void _internal_set_testsfixed64(int64_t value);
  public:

  // sfixed32 testsfixed32 = 12;
  void clear_testsfixed32();
  int32_t testsfixed32() const;
  void set_testsfixed32(int32_t value);
  private:
  int32_t _internal_testsfixed32() const;
  void _internal_set_testsfixed32(int32_t value);
  public:

  // bool testBool = 14;
  void clear_testbool();
  bool testbool() const;
  void set_testbool(bool value);
  private:
  bool _internal_testbool() const;
  void _internal_set_testbool(bool value);
  public:

  // .GamePlayerTest.TestEnum testEnum = 19;
  void clear_testenum();
  ::GamePlayerTest::TestEnum testenum() const;
  void set_testenum(::GamePlayerTest::TestEnum value);
  private:
  ::GamePlayerTest::TestEnum _internal_testenum() const;
  void _internal_set_testenum(::GamePlayerTest::TestEnum value);
  public:

  // @@protoc_insertion_point(class_scope:GamePlayerTest.TestMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > listint_;
    mutable std::atomic<int> _listint_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestMsg_TestMapEntry_DoNotUse,
        int32_t, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> testmap_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr teststring_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr testbytes_;
    double testd_;
    int64_t testlong_;
    int32_t testint_;
    int32_t tests32_;
    int64_t tests364_;
    uint64_t testu64_;
    uint32_t testu32_;
    uint32_t testfixed32_;
    uint64_t testfixed64_;
    int64_t testsfixed64_;
    int32_t testsfixed32_;
    bool testbool_;
    int testenum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TestMsg

// optional double testD = 3;
inline bool TestMsg::_internal_has_testd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestMsg::has_testd() const {
  return _internal_has_testd();
}
inline void TestMsg::clear_testd() {
  _impl_.testd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double TestMsg::_internal_testd() const {
  return _impl_.testd_;
}
inline double TestMsg::testd() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testD)
  return _internal_testd();
}
inline void TestMsg::_internal_set_testd(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.testd_ = value;
}
inline void TestMsg::set_testd(double value) {
  _internal_set_testd(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testD)
}

// int32 testInt = 4;
inline void TestMsg::clear_testint() {
  _impl_.testint_ = 0;
}
inline int32_t TestMsg::_internal_testint() const {
  return _impl_.testint_;
}
inline int32_t TestMsg::testint() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testInt)
  return _internal_testint();
}
inline void TestMsg::_internal_set_testint(int32_t value) {
  
  _impl_.testint_ = value;
}
inline void TestMsg::set_testint(int32_t value) {
  _internal_set_testint(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testInt)
}

// int64 testLong = 5;
inline void TestMsg::clear_testlong() {
  _impl_.testlong_ = int64_t{0};
}
inline int64_t TestMsg::_internal_testlong() const {
  return _impl_.testlong_;
}
inline int64_t TestMsg::testlong() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testLong)
  return _internal_testlong();
}
inline void TestMsg::_internal_set_testlong(int64_t value) {
  
  _impl_.testlong_ = value;
}
inline void TestMsg::set_testlong(int64_t value) {
  _internal_set_testlong(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testLong)
}

// sint32 testS32 = 6;
inline void TestMsg::clear_tests32() {
  _impl_.tests32_ = 0;
}
inline int32_t TestMsg::_internal_tests32() const {
  return _impl_.tests32_;
}
inline int32_t TestMsg::tests32() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testS32)
  return _internal_tests32();
}
inline void TestMsg::_internal_set_tests32(int32_t value) {
  
  _impl_.tests32_ = value;
}
inline void TestMsg::set_tests32(int32_t value) {
  _internal_set_tests32(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testS32)
}

// sint64 testS364 = 7;
inline void TestMsg::clear_tests364() {
  _impl_.tests364_ = int64_t{0};
}
inline int64_t TestMsg::_internal_tests364() const {
  return _impl_.tests364_;
}
inline int64_t TestMsg::tests364() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testS364)
  return _internal_tests364();
}
inline void TestMsg::_internal_set_tests364(int64_t value) {
  
  _impl_.tests364_ = value;
}
inline void TestMsg::set_tests364(int64_t value) {
  _internal_set_tests364(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testS364)
}

// uint32 testU32 = 8;
inline void TestMsg::clear_testu32() {
  _impl_.testu32_ = 0u;
}
inline uint32_t TestMsg::_internal_testu32() const {
  return _impl_.testu32_;
}
inline uint32_t TestMsg::testu32() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testU32)
  return _internal_testu32();
}
inline void TestMsg::_internal_set_testu32(uint32_t value) {
  
  _impl_.testu32_ = value;
}
inline void TestMsg::set_testu32(uint32_t value) {
  _internal_set_testu32(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testU32)
}

// uint64 testU64 = 9;
inline void TestMsg::clear_testu64() {
  _impl_.testu64_ = uint64_t{0u};
}
inline uint64_t TestMsg::_internal_testu64() const {
  return _impl_.testu64_;
}
inline uint64_t TestMsg::testu64() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testU64)
  return _internal_testu64();
}
inline void TestMsg::_internal_set_testu64(uint64_t value) {
  
  _impl_.testu64_ = value;
}
inline void TestMsg::set_testu64(uint64_t value) {
  _internal_set_testu64(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testU64)
}

// fixed32 testFixed32 = 10;
inline void TestMsg::clear_testfixed32() {
  _impl_.testfixed32_ = 0u;
}
inline uint32_t TestMsg::_internal_testfixed32() const {
  return _impl_.testfixed32_;
}
inline uint32_t TestMsg::testfixed32() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testFixed32)
  return _internal_testfixed32();
}
inline void TestMsg::_internal_set_testfixed32(uint32_t value) {
  
  _impl_.testfixed32_ = value;
}
inline void TestMsg::set_testfixed32(uint32_t value) {
  _internal_set_testfixed32(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testFixed32)
}

// fixed64 testFixed64 = 11;
inline void TestMsg::clear_testfixed64() {
  _impl_.testfixed64_ = uint64_t{0u};
}
inline uint64_t TestMsg::_internal_testfixed64() const {
  return _impl_.testfixed64_;
}
inline uint64_t TestMsg::testfixed64() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testFixed64)
  return _internal_testfixed64();
}
inline void TestMsg::_internal_set_testfixed64(uint64_t value) {
  
  _impl_.testfixed64_ = value;
}
inline void TestMsg::set_testfixed64(uint64_t value) {
  _internal_set_testfixed64(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testFixed64)
}

// sfixed32 testsfixed32 = 12;
inline void TestMsg::clear_testsfixed32() {
  _impl_.testsfixed32_ = 0;
}
inline int32_t TestMsg::_internal_testsfixed32() const {
  return _impl_.testsfixed32_;
}
inline int32_t TestMsg::testsfixed32() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testsfixed32)
  return _internal_testsfixed32();
}
inline void TestMsg::_internal_set_testsfixed32(int32_t value) {
  
  _impl_.testsfixed32_ = value;
}
inline void TestMsg::set_testsfixed32(int32_t value) {
  _internal_set_testsfixed32(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testsfixed32)
}

// sfixed64 testsfixed64 = 13;
inline void TestMsg::clear_testsfixed64() {
  _impl_.testsfixed64_ = int64_t{0};
}
inline int64_t TestMsg::_internal_testsfixed64() const {
  return _impl_.testsfixed64_;
}
inline int64_t TestMsg::testsfixed64() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testsfixed64)
  return _internal_testsfixed64();
}
inline void TestMsg::_internal_set_testsfixed64(int64_t value) {
  
  _impl_.testsfixed64_ = value;
}
inline void TestMsg::set_testsfixed64(int64_t value) {
  _internal_set_testsfixed64(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testsfixed64)
}

// bool testBool = 14;
inline void TestMsg::clear_testbool() {
  _impl_.testbool_ = false;
}
inline bool TestMsg::_internal_testbool() const {
  return _impl_.testbool_;
}
inline bool TestMsg::testbool() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testBool)
  return _internal_testbool();
}
inline void TestMsg::_internal_set_testbool(bool value) {
  
  _impl_.testbool_ = value;
}
inline void TestMsg::set_testbool(bool value) {
  _internal_set_testbool(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testBool)
}

// string testString = 15;
inline void TestMsg::clear_teststring() {
  _impl_.teststring_.ClearToEmpty();
}
inline const std::string& TestMsg::teststring() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testString)
  return _internal_teststring();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestMsg::set_teststring(ArgT0&& arg0, ArgT... args) {
 
 _impl_.teststring_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testString)
}
inline std::string* TestMsg::mutable_teststring() {
  std::string* _s = _internal_mutable_teststring();
  // @@protoc_insertion_point(field_mutable:GamePlayerTest.TestMsg.testString)
  return _s;
}
inline const std::string& TestMsg::_internal_teststring() const {
  return _impl_.teststring_.Get();
}
inline void TestMsg::_internal_set_teststring(const std::string& value) {
  
  _impl_.teststring_.Set(value, GetArenaForAllocation());
}
inline std::string* TestMsg::_internal_mutable_teststring() {
  
  return _impl_.teststring_.Mutable(GetArenaForAllocation());
}
inline std::string* TestMsg::release_teststring() {
  // @@protoc_insertion_point(field_release:GamePlayerTest.TestMsg.testString)
  return _impl_.teststring_.Release();
}
inline void TestMsg::set_allocated_teststring(std::string* teststring) {
  if (teststring != nullptr) {
    
  } else {
    
  }
  _impl_.teststring_.SetAllocated(teststring, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.teststring_.IsDefault()) {
    _impl_.teststring_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GamePlayerTest.TestMsg.testString)
}

// bytes testBytes = 16;
inline void TestMsg::clear_testbytes() {
  _impl_.testbytes_.ClearToEmpty();
}
inline const std::string& TestMsg::testbytes() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testBytes)
  return _internal_testbytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestMsg::set_testbytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.testbytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testBytes)
}
inline std::string* TestMsg::mutable_testbytes() {
  std::string* _s = _internal_mutable_testbytes();
  // @@protoc_insertion_point(field_mutable:GamePlayerTest.TestMsg.testBytes)
  return _s;
}
inline const std::string& TestMsg::_internal_testbytes() const {
  return _impl_.testbytes_.Get();
}
inline void TestMsg::_internal_set_testbytes(const std::string& value) {
  
  _impl_.testbytes_.Set(value, GetArenaForAllocation());
}
inline std::string* TestMsg::_internal_mutable_testbytes() {
  
  return _impl_.testbytes_.Mutable(GetArenaForAllocation());
}
inline std::string* TestMsg::release_testbytes() {
  // @@protoc_insertion_point(field_release:GamePlayerTest.TestMsg.testBytes)
  return _impl_.testbytes_.Release();
}
inline void TestMsg::set_allocated_testbytes(std::string* testbytes) {
  if (testbytes != nullptr) {
    
  } else {
    
  }
  _impl_.testbytes_.SetAllocated(testbytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.testbytes_.IsDefault()) {
    _impl_.testbytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GamePlayerTest.TestMsg.testBytes)
}

// repeated int32 listInt = 17;
inline int TestMsg::_internal_listint_size() const {
  return _impl_.listint_.size();
}
inline int TestMsg::listint_size() const {
  return _internal_listint_size();
}
inline void TestMsg::clear_listint() {
  _impl_.listint_.Clear();
}
inline int32_t TestMsg::_internal_listint(int index) const {
  return _impl_.listint_.Get(index);
}
inline int32_t TestMsg::listint(int index) const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.listInt)
  return _internal_listint(index);
}
inline void TestMsg::set_listint(int index, int32_t value) {
  _impl_.listint_.Set(index, value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.listInt)
}
inline void TestMsg::_internal_add_listint(int32_t value) {
  _impl_.listint_.Add(value);
}
inline void TestMsg::add_listint(int32_t value) {
  _internal_add_listint(value);
  // @@protoc_insertion_point(field_add:GamePlayerTest.TestMsg.listInt)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestMsg::_internal_listint() const {
  return _impl_.listint_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestMsg::listint() const {
  // @@protoc_insertion_point(field_list:GamePlayerTest.TestMsg.listInt)
  return _internal_listint();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestMsg::_internal_mutable_listint() {
  return &_impl_.listint_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestMsg::mutable_listint() {
  // @@protoc_insertion_point(field_mutable_list:GamePlayerTest.TestMsg.listInt)
  return _internal_mutable_listint();
}

// map<int32, string> testMap = 18;
inline int TestMsg::_internal_testmap_size() const {
  return _impl_.testmap_.size();
}
inline int TestMsg::testmap_size() const {
  return _internal_testmap_size();
}
inline void TestMsg::clear_testmap() {
  _impl_.testmap_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
TestMsg::_internal_testmap() const {
  return _impl_.testmap_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
TestMsg::testmap() const {
  // @@protoc_insertion_point(field_map:GamePlayerTest.TestMsg.testMap)
  return _internal_testmap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
TestMsg::_internal_mutable_testmap() {
  return _impl_.testmap_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
TestMsg::mutable_testmap() {
  // @@protoc_insertion_point(field_mutable_map:GamePlayerTest.TestMsg.testMap)
  return _internal_mutable_testmap();
}

// .GamePlayerTest.TestEnum testEnum = 19;
inline void TestMsg::clear_testenum() {
  _impl_.testenum_ = 0;
}
inline ::GamePlayerTest::TestEnum TestMsg::_internal_testenum() const {
  return static_cast< ::GamePlayerTest::TestEnum >(_impl_.testenum_);
}
inline ::GamePlayerTest::TestEnum TestMsg::testenum() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testEnum)
  return _internal_testenum();
}
inline void TestMsg::_internal_set_testenum(::GamePlayerTest::TestEnum value) {
  
  _impl_.testenum_ = value;
}
inline void TestMsg::set_testenum(::GamePlayerTest::TestEnum value) {
  _internal_set_testenum(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testEnum)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GamePlayerTest

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::GamePlayerTest::TestEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GamePlayerTest::TestEnum>() {
  return ::GamePlayerTest::TestEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
