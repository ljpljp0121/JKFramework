// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

package GamePlayerTest;

public final class Test {
  private Test() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   *枚举的声明
   * </pre>
   *
   * Protobuf enum {@code GamePlayerTest.TestEnum}
   */
  public enum TestEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *第一个常量必须映射到0
     * </pre>
     *
     * <code>NORMAL = 0;</code>
     */
    NORMAL(0),
    /**
     * <code>BOSS = 5;</code>
     */
    BOSS(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *第一个常量必须映射到0
     * </pre>
     *
     * <code>NORMAL = 0;</code>
     */
    public static final int NORMAL_VALUE = 0;
    /**
     * <code>BOSS = 5;</code>
     */
    public static final int BOSS_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TestEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TestEnum forNumber(int value) {
      switch (value) {
        case 0: return NORMAL;
        case 5: return BOSS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TestEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TestEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TestEnum>() {
            public TestEnum findValueByNumber(int number) {
              return TestEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return GamePlayerTest.Test.getDescriptor().getEnumTypes().get(0);
    }

    private static final TestEnum[] VALUES = values();

    public static TestEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TestEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:GamePlayerTest.TestEnum)
  }

  public interface TestMsgOrBuilder extends
      // @@protoc_insertion_point(interface_extends:GamePlayerTest.TestMsg)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *浮点数 等号后面代表变量的唯一编号
     *float testF = 1;
     * </pre>
     *
     * <code>optional double testD = 3;</code>
     * @return Whether the testD field is set.
     */
    boolean hasTestD();
    /**
     * <pre>
     *浮点数 等号后面代表变量的唯一编号
     *float testF = 1;
     * </pre>
     *
     * <code>optional double testD = 3;</code>
     * @return The testD.
     */
    double getTestD();

    /**
     * <pre>
     *变长编码
     *所谓变长就是会根据数字大小 来使用对应的字节数存储
     *protobuf帮助我们优化的部分 可尽量使用少的字节数 来存储
     * </pre>
     *
     * <code>int32 testInt = 4;</code>
     * @return The testInt.
     */
    int getTestInt();

    /**
     * <pre>
     *1 2 4 8
     * </pre>
     *
     * <code>int64 testLong = 5;</code>
     * @return The testLong.
     */
    long getTestLong();

    /**
     * <pre>
     *更适用于表示负数类型整数
     * </pre>
     *
     * <code>sint32 testS32 = 6;</code>
     * @return The testS32.
     */
    int getTestS32();

    /**
     * <pre>
     *C# - long 适用于表示负数
     * </pre>
     *
     * <code>sint64 testS364 = 7;</code>
     * @return The testS364.
     */
    long getTestS364();

    /**
     * <pre>
     *无符号变长编码
     * </pre>
     *
     * <code>uint32 testU32 = 8;</code>
     * @return The testU32.
     */
    int getTestU32();

    /**
     * <pre>
     *C# - ulong 变长的编码
     * </pre>
     *
     * <code>uint64 testU64 = 9;</code>
     * @return The testU64.
     */
    long getTestU64();

    /**
     * <pre>
     *固定字节数的类型
     *通常用来表示大于2的28次方的数 比uint32更有效 始终是4个字节
     * </pre>
     *
     * <code>fixed32 testFixed32 = 10;</code>
     * @return The testFixed32.
     */
    int getTestFixed32();

    /**
     * <pre>
     *通常用来表示大于2的56次方的数 比uint64更有效 始终是8个字节
     * </pre>
     *
     * <code>fixed64 testFixed64 = 11;</code>
     * @return The testFixed64.
     */
    long getTestFixed64();

    /**
     * <pre>
     *C# - int 始终是4个字节
     * </pre>
     *
     * <code>sfixed32 testsfixed32 = 12;</code>
     * @return The testsfixed32.
     */
    int getTestsfixed32();

    /**
     * <pre>
     *C# - long 始终是8个字节
     * </pre>
     *
     * <code>sfixed64 testsfixed64 = 13;</code>
     * @return The testsfixed64.
     */
    long getTestsfixed64();

    /**
     * <pre>
     *其他类型
     * </pre>
     *
     * <code>bool testBool = 14;</code>
     * @return The testBool.
     */
    boolean getTestBool();

    /**
     * <pre>
     *C# - string
     * </pre>
     *
     * <code>string testString = 15;</code>
     * @return The testString.
     */
    java.lang.String getTestString();
    /**
     * <pre>
     *C# - string
     * </pre>
     *
     * <code>string testString = 15;</code>
     * @return The bytes for testString.
     */
    com.google.protobuf.ByteString
        getTestStringBytes();

    /**
     * <pre>
     *新的类型 protobuf自己实现的类型
     * </pre>
     *
     * <code>bytes testBytes = 16;</code>
     * @return The testBytes.
     */
    com.google.protobuf.ByteString getTestBytes();

    /**
     * <pre>
     *数组List
     * </pre>
     *
     * <code>repeated int32 listInt = 17;</code>
     * @return A list containing the listInt.
     */
    java.util.List<java.lang.Integer> getListIntList();
    /**
     * <pre>
     *数组List
     * </pre>
     *
     * <code>repeated int32 listInt = 17;</code>
     * @return The count of listInt.
     */
    int getListIntCount();
    /**
     * <pre>
     *数组List
     * </pre>
     *
     * <code>repeated int32 listInt = 17;</code>
     * @param index The index of the element to return.
     * @return The listInt at the given index.
     */
    int getListInt(int index);

    /**
     * <pre>
     *字典 Dictionary
     * </pre>
     *
     * <code>map&lt;int32, string&gt; testMap = 18;</code>
     */
    int getTestMapCount();
    /**
     * <pre>
     *字典 Dictionary
     * </pre>
     *
     * <code>map&lt;int32, string&gt; testMap = 18;</code>
     */
    boolean containsTestMap(
        int key);
    /**
     * Use {@link #getTestMapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.String>
    getTestMap();
    /**
     * <pre>
     *字典 Dictionary
     * </pre>
     *
     * <code>map&lt;int32, string&gt; testMap = 18;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.String>
    getTestMapMap();
    /**
     * <pre>
     *字典 Dictionary
     * </pre>
     *
     * <code>map&lt;int32, string&gt; testMap = 18;</code>
     */

    /* nullable */
java.lang.String getTestMapOrDefault(
        int key,
        /* nullable */
java.lang.String defaultValue);
    /**
     * <pre>
     *字典 Dictionary
     * </pre>
     *
     * <code>map&lt;int32, string&gt; testMap = 18;</code>
     */

    java.lang.String getTestMapOrThrow(
        int key);

    /**
     * <pre>
     *枚举成员变量的声明 需要唯一标识
     * </pre>
     *
     * <code>.GamePlayerTest.TestEnum testEnum = 19;</code>
     * @return The enum numeric value on the wire for testEnum.
     */
    int getTestEnumValue();
    /**
     * <pre>
     *枚举成员变量的声明 需要唯一标识
     * </pre>
     *
     * <code>.GamePlayerTest.TestEnum testEnum = 19;</code>
     * @return The testEnum.
     */
    GamePlayerTest.Test.TestEnum getTestEnum();
  }
  /**
   * <pre>
   *消息类 4
   * </pre>
   *
   * Protobuf type {@code GamePlayerTest.TestMsg}
   */
  public static final class TestMsg extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:GamePlayerTest.TestMsg)
      TestMsgOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TestMsg.newBuilder() to construct.
    private TestMsg(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TestMsg() {
      testString_ = "";
      testBytes_ = com.google.protobuf.ByteString.EMPTY;
      listInt_ = emptyIntList();
      testEnum_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TestMsg();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TestMsg(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 25: {
              bitField0_ |= 0x00000001;
              testD_ = input.readDouble();
              break;
            }
            case 32: {

              testInt_ = input.readInt32();
              break;
            }
            case 40: {

              testLong_ = input.readInt64();
              break;
            }
            case 48: {

              testS32_ = input.readSInt32();
              break;
            }
            case 56: {

              testS364_ = input.readSInt64();
              break;
            }
            case 64: {

              testU32_ = input.readUInt32();
              break;
            }
            case 72: {

              testU64_ = input.readUInt64();
              break;
            }
            case 85: {

              testFixed32_ = input.readFixed32();
              break;
            }
            case 89: {

              testFixed64_ = input.readFixed64();
              break;
            }
            case 101: {

              testsfixed32_ = input.readSFixed32();
              break;
            }
            case 105: {

              testsfixed64_ = input.readSFixed64();
              break;
            }
            case 112: {

              testBool_ = input.readBool();
              break;
            }
            case 122: {
              java.lang.String s = input.readStringRequireUtf8();

              testString_ = s;
              break;
            }
            case 130: {

              testBytes_ = input.readBytes();
              break;
            }
            case 136: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                listInt_ = newIntList();
                mutable_bitField0_ |= 0x00000002;
              }
              listInt_.addInt(input.readInt32());
              break;
            }
            case 138: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) != 0) && input.getBytesUntilLimit() > 0) {
                listInt_ = newIntList();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                listInt_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 146: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                testMap_ = com.google.protobuf.MapField.newMapField(
                    TestMapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000004;
              }
              com.google.protobuf.MapEntry<java.lang.Integer, java.lang.String>
              testMap__ = input.readMessage(
                  TestMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              testMap_.getMutableMap().put(
                  testMap__.getKey(), testMap__.getValue());
              break;
            }
            case 152: {
              int rawValue = input.readEnum();

              testEnum_ = rawValue;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          listInt_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return GamePlayerTest.Test.internal_static_GamePlayerTest_TestMsg_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 18:
          return internalGetTestMap();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return GamePlayerTest.Test.internal_static_GamePlayerTest_TestMsg_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              GamePlayerTest.Test.TestMsg.class, GamePlayerTest.Test.TestMsg.Builder.class);
    }

    private int bitField0_;
    public static final int TESTD_FIELD_NUMBER = 3;
    private double testD_;
    /**
     * <pre>
     *浮点数 等号后面代表变量的唯一编号
     *float testF = 1;
     * </pre>
     *
     * <code>optional double testD = 3;</code>
     * @return Whether the testD field is set.
     */
    @java.lang.Override
    public boolean hasTestD() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     *浮点数 等号后面代表变量的唯一编号
     *float testF = 1;
     * </pre>
     *
     * <code>optional double testD = 3;</code>
     * @return The testD.
     */
    @java.lang.Override
    public double getTestD() {
      return testD_;
    }

    public static final int TESTINT_FIELD_NUMBER = 4;
    private int testInt_;
    /**
     * <pre>
     *变长编码
     *所谓变长就是会根据数字大小 来使用对应的字节数存储
     *protobuf帮助我们优化的部分 可尽量使用少的字节数 来存储
     * </pre>
     *
     * <code>int32 testInt = 4;</code>
     * @return The testInt.
     */
    @java.lang.Override
    public int getTestInt() {
      return testInt_;
    }

    public static final int TESTLONG_FIELD_NUMBER = 5;
    private long testLong_;
    /**
     * <pre>
     *1 2 4 8
     * </pre>
     *
     * <code>int64 testLong = 5;</code>
     * @return The testLong.
     */
    @java.lang.Override
    public long getTestLong() {
      return testLong_;
    }

    public static final int TESTS32_FIELD_NUMBER = 6;
    private int testS32_;
    /**
     * <pre>
     *更适用于表示负数类型整数
     * </pre>
     *
     * <code>sint32 testS32 = 6;</code>
     * @return The testS32.
     */
    @java.lang.Override
    public int getTestS32() {
      return testS32_;
    }

    public static final int TESTS364_FIELD_NUMBER = 7;
    private long testS364_;
    /**
     * <pre>
     *C# - long 适用于表示负数
     * </pre>
     *
     * <code>sint64 testS364 = 7;</code>
     * @return The testS364.
     */
    @java.lang.Override
    public long getTestS364() {
      return testS364_;
    }

    public static final int TESTU32_FIELD_NUMBER = 8;
    private int testU32_;
    /**
     * <pre>
     *无符号变长编码
     * </pre>
     *
     * <code>uint32 testU32 = 8;</code>
     * @return The testU32.
     */
    @java.lang.Override
    public int getTestU32() {
      return testU32_;
    }

    public static final int TESTU64_FIELD_NUMBER = 9;
    private long testU64_;
    /**
     * <pre>
     *C# - ulong 变长的编码
     * </pre>
     *
     * <code>uint64 testU64 = 9;</code>
     * @return The testU64.
     */
    @java.lang.Override
    public long getTestU64() {
      return testU64_;
    }

    public static final int TESTFIXED32_FIELD_NUMBER = 10;
    private int testFixed32_;
    /**
     * <pre>
     *固定字节数的类型
     *通常用来表示大于2的28次方的数 比uint32更有效 始终是4个字节
     * </pre>
     *
     * <code>fixed32 testFixed32 = 10;</code>
     * @return The testFixed32.
     */
    @java.lang.Override
    public int getTestFixed32() {
      return testFixed32_;
    }

    public static final int TESTFIXED64_FIELD_NUMBER = 11;
    private long testFixed64_;
    /**
     * <pre>
     *通常用来表示大于2的56次方的数 比uint64更有效 始终是8个字节
     * </pre>
     *
     * <code>fixed64 testFixed64 = 11;</code>
     * @return The testFixed64.
     */
    @java.lang.Override
    public long getTestFixed64() {
      return testFixed64_;
    }

    public static final int TESTSFIXED32_FIELD_NUMBER = 12;
    private int testsfixed32_;
    /**
     * <pre>
     *C# - int 始终是4个字节
     * </pre>
     *
     * <code>sfixed32 testsfixed32 = 12;</code>
     * @return The testsfixed32.
     */
    @java.lang.Override
    public int getTestsfixed32() {
      return testsfixed32_;
    }

    public static final int TESTSFIXED64_FIELD_NUMBER = 13;
    private long testsfixed64_;
    /**
     * <pre>
     *C# - long 始终是8个字节
     * </pre>
     *
     * <code>sfixed64 testsfixed64 = 13;</code>
     * @return The testsfixed64.
     */
    @java.lang.Override
    public long getTestsfixed64() {
      return testsfixed64_;
    }

    public static final int TESTBOOL_FIELD_NUMBER = 14;
    private boolean testBool_;
    /**
     * <pre>
     *其他类型
     * </pre>
     *
     * <code>bool testBool = 14;</code>
     * @return The testBool.
     */
    @java.lang.Override
    public boolean getTestBool() {
      return testBool_;
    }

    public static final int TESTSTRING_FIELD_NUMBER = 15;
    private volatile java.lang.Object testString_;
    /**
     * <pre>
     *C# - string
     * </pre>
     *
     * <code>string testString = 15;</code>
     * @return The testString.
     */
    @java.lang.Override
    public java.lang.String getTestString() {
      java.lang.Object ref = testString_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        testString_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *C# - string
     * </pre>
     *
     * <code>string testString = 15;</code>
     * @return The bytes for testString.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTestStringBytes() {
      java.lang.Object ref = testString_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        testString_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TESTBYTES_FIELD_NUMBER = 16;
    private com.google.protobuf.ByteString testBytes_;
    /**
     * <pre>
     *新的类型 protobuf自己实现的类型
     * </pre>
     *
     * <code>bytes testBytes = 16;</code>
     * @return The testBytes.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getTestBytes() {
      return testBytes_;
    }

    public static final int LISTINT_FIELD_NUMBER = 17;
    private com.google.protobuf.Internal.IntList listInt_;
    /**
     * <pre>
     *数组List
     * </pre>
     *
     * <code>repeated int32 listInt = 17;</code>
     * @return A list containing the listInt.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getListIntList() {
      return listInt_;
    }
    /**
     * <pre>
     *数组List
     * </pre>
     *
     * <code>repeated int32 listInt = 17;</code>
     * @return The count of listInt.
     */
    public int getListIntCount() {
      return listInt_.size();
    }
    /**
     * <pre>
     *数组List
     * </pre>
     *
     * <code>repeated int32 listInt = 17;</code>
     * @param index The index of the element to return.
     * @return The listInt at the given index.
     */
    public int getListInt(int index) {
      return listInt_.getInt(index);
    }
    private int listIntMemoizedSerializedSize = -1;

    public static final int TESTMAP_FIELD_NUMBER = 18;
    private static final class TestMapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.Integer, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.Integer, java.lang.String>newDefaultInstance(
                  GamePlayerTest.Test.internal_static_GamePlayerTest_TestMsg_TestMapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.Integer, java.lang.String> testMap_;
    private com.google.protobuf.MapField<java.lang.Integer, java.lang.String>
    internalGetTestMap() {
      if (testMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            TestMapDefaultEntryHolder.defaultEntry);
      }
      return testMap_;
    }

    public int getTestMapCount() {
      return internalGetTestMap().getMap().size();
    }
    /**
     * <pre>
     *字典 Dictionary
     * </pre>
     *
     * <code>map&lt;int32, string&gt; testMap = 18;</code>
     */

    @java.lang.Override
    public boolean containsTestMap(
        int key) {
      
      return internalGetTestMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getTestMapMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.String> getTestMap() {
      return getTestMapMap();
    }
    /**
     * <pre>
     *字典 Dictionary
     * </pre>
     *
     * <code>map&lt;int32, string&gt; testMap = 18;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.String> getTestMapMap() {
      return internalGetTestMap().getMap();
    }
    /**
     * <pre>
     *字典 Dictionary
     * </pre>
     *
     * <code>map&lt;int32, string&gt; testMap = 18;</code>
     */
    @java.lang.Override

    public java.lang.String getTestMapOrDefault(
        int key,
        java.lang.String defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.String> map =
          internalGetTestMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     *字典 Dictionary
     * </pre>
     *
     * <code>map&lt;int32, string&gt; testMap = 18;</code>
     */
    @java.lang.Override

    public java.lang.String getTestMapOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.String> map =
          internalGetTestMap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int TESTENUM_FIELD_NUMBER = 19;
    private int testEnum_;
    /**
     * <pre>
     *枚举成员变量的声明 需要唯一标识
     * </pre>
     *
     * <code>.GamePlayerTest.TestEnum testEnum = 19;</code>
     * @return The enum numeric value on the wire for testEnum.
     */
    @java.lang.Override public int getTestEnumValue() {
      return testEnum_;
    }
    /**
     * <pre>
     *枚举成员变量的声明 需要唯一标识
     * </pre>
     *
     * <code>.GamePlayerTest.TestEnum testEnum = 19;</code>
     * @return The testEnum.
     */
    @java.lang.Override public GamePlayerTest.Test.TestEnum getTestEnum() {
      @SuppressWarnings("deprecation")
      GamePlayerTest.Test.TestEnum result = GamePlayerTest.Test.TestEnum.valueOf(testEnum_);
      return result == null ? GamePlayerTest.Test.TestEnum.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeDouble(3, testD_);
      }
      if (testInt_ != 0) {
        output.writeInt32(4, testInt_);
      }
      if (testLong_ != 0L) {
        output.writeInt64(5, testLong_);
      }
      if (testS32_ != 0) {
        output.writeSInt32(6, testS32_);
      }
      if (testS364_ != 0L) {
        output.writeSInt64(7, testS364_);
      }
      if (testU32_ != 0) {
        output.writeUInt32(8, testU32_);
      }
      if (testU64_ != 0L) {
        output.writeUInt64(9, testU64_);
      }
      if (testFixed32_ != 0) {
        output.writeFixed32(10, testFixed32_);
      }
      if (testFixed64_ != 0L) {
        output.writeFixed64(11, testFixed64_);
      }
      if (testsfixed32_ != 0) {
        output.writeSFixed32(12, testsfixed32_);
      }
      if (testsfixed64_ != 0L) {
        output.writeSFixed64(13, testsfixed64_);
      }
      if (testBool_ != false) {
        output.writeBool(14, testBool_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(testString_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 15, testString_);
      }
      if (!testBytes_.isEmpty()) {
        output.writeBytes(16, testBytes_);
      }
      if (getListIntList().size() > 0) {
        output.writeUInt32NoTag(138);
        output.writeUInt32NoTag(listIntMemoizedSerializedSize);
      }
      for (int i = 0; i < listInt_.size(); i++) {
        output.writeInt32NoTag(listInt_.getInt(i));
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeIntegerMapTo(
          output,
          internalGetTestMap(),
          TestMapDefaultEntryHolder.defaultEntry,
          18);
      if (testEnum_ != GamePlayerTest.Test.TestEnum.NORMAL.getNumber()) {
        output.writeEnum(19, testEnum_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, testD_);
      }
      if (testInt_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, testInt_);
      }
      if (testLong_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, testLong_);
      }
      if (testS32_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(6, testS32_);
      }
      if (testS364_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt64Size(7, testS364_);
      }
      if (testU32_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, testU32_);
      }
      if (testU64_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(9, testU64_);
      }
      if (testFixed32_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(10, testFixed32_);
      }
      if (testFixed64_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(11, testFixed64_);
      }
      if (testsfixed32_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(12, testsfixed32_);
      }
      if (testsfixed64_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed64Size(13, testsfixed64_);
      }
      if (testBool_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14, testBool_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(testString_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(15, testString_);
      }
      if (!testBytes_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(16, testBytes_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < listInt_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(listInt_.getInt(i));
        }
        size += dataSize;
        if (!getListIntList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        listIntMemoizedSerializedSize = dataSize;
      }
      for (java.util.Map.Entry<java.lang.Integer, java.lang.String> entry
           : internalGetTestMap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.Integer, java.lang.String>
        testMap__ = TestMapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(18, testMap__);
      }
      if (testEnum_ != GamePlayerTest.Test.TestEnum.NORMAL.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(19, testEnum_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof GamePlayerTest.Test.TestMsg)) {
        return super.equals(obj);
      }
      GamePlayerTest.Test.TestMsg other = (GamePlayerTest.Test.TestMsg) obj;

      if (hasTestD() != other.hasTestD()) return false;
      if (hasTestD()) {
        if (java.lang.Double.doubleToLongBits(getTestD())
            != java.lang.Double.doubleToLongBits(
                other.getTestD())) return false;
      }
      if (getTestInt()
          != other.getTestInt()) return false;
      if (getTestLong()
          != other.getTestLong()) return false;
      if (getTestS32()
          != other.getTestS32()) return false;
      if (getTestS364()
          != other.getTestS364()) return false;
      if (getTestU32()
          != other.getTestU32()) return false;
      if (getTestU64()
          != other.getTestU64()) return false;
      if (getTestFixed32()
          != other.getTestFixed32()) return false;
      if (getTestFixed64()
          != other.getTestFixed64()) return false;
      if (getTestsfixed32()
          != other.getTestsfixed32()) return false;
      if (getTestsfixed64()
          != other.getTestsfixed64()) return false;
      if (getTestBool()
          != other.getTestBool()) return false;
      if (!getTestString()
          .equals(other.getTestString())) return false;
      if (!getTestBytes()
          .equals(other.getTestBytes())) return false;
      if (!getListIntList()
          .equals(other.getListIntList())) return false;
      if (!internalGetTestMap().equals(
          other.internalGetTestMap())) return false;
      if (testEnum_ != other.testEnum_) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTestD()) {
        hash = (37 * hash) + TESTD_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getTestD()));
      }
      hash = (37 * hash) + TESTINT_FIELD_NUMBER;
      hash = (53 * hash) + getTestInt();
      hash = (37 * hash) + TESTLONG_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTestLong());
      hash = (37 * hash) + TESTS32_FIELD_NUMBER;
      hash = (53 * hash) + getTestS32();
      hash = (37 * hash) + TESTS364_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTestS364());
      hash = (37 * hash) + TESTU32_FIELD_NUMBER;
      hash = (53 * hash) + getTestU32();
      hash = (37 * hash) + TESTU64_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTestU64());
      hash = (37 * hash) + TESTFIXED32_FIELD_NUMBER;
      hash = (53 * hash) + getTestFixed32();
      hash = (37 * hash) + TESTFIXED64_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTestFixed64());
      hash = (37 * hash) + TESTSFIXED32_FIELD_NUMBER;
      hash = (53 * hash) + getTestsfixed32();
      hash = (37 * hash) + TESTSFIXED64_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTestsfixed64());
      hash = (37 * hash) + TESTBOOL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getTestBool());
      hash = (37 * hash) + TESTSTRING_FIELD_NUMBER;
      hash = (53 * hash) + getTestString().hashCode();
      hash = (37 * hash) + TESTBYTES_FIELD_NUMBER;
      hash = (53 * hash) + getTestBytes().hashCode();
      if (getListIntCount() > 0) {
        hash = (37 * hash) + LISTINT_FIELD_NUMBER;
        hash = (53 * hash) + getListIntList().hashCode();
      }
      if (!internalGetTestMap().getMap().isEmpty()) {
        hash = (37 * hash) + TESTMAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetTestMap().hashCode();
      }
      hash = (37 * hash) + TESTENUM_FIELD_NUMBER;
      hash = (53 * hash) + testEnum_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static GamePlayerTest.Test.TestMsg parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static GamePlayerTest.Test.TestMsg parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static GamePlayerTest.Test.TestMsg parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static GamePlayerTest.Test.TestMsg parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static GamePlayerTest.Test.TestMsg parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static GamePlayerTest.Test.TestMsg parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static GamePlayerTest.Test.TestMsg parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static GamePlayerTest.Test.TestMsg parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static GamePlayerTest.Test.TestMsg parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static GamePlayerTest.Test.TestMsg parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static GamePlayerTest.Test.TestMsg parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static GamePlayerTest.Test.TestMsg parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(GamePlayerTest.Test.TestMsg prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *消息类 4
     * </pre>
     *
     * Protobuf type {@code GamePlayerTest.TestMsg}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:GamePlayerTest.TestMsg)
        GamePlayerTest.Test.TestMsgOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return GamePlayerTest.Test.internal_static_GamePlayerTest_TestMsg_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 18:
            return internalGetTestMap();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 18:
            return internalGetMutableTestMap();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return GamePlayerTest.Test.internal_static_GamePlayerTest_TestMsg_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                GamePlayerTest.Test.TestMsg.class, GamePlayerTest.Test.TestMsg.Builder.class);
      }

      // Construct using GamePlayerTest.Test.TestMsg.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        testD_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000001);
        testInt_ = 0;

        testLong_ = 0L;

        testS32_ = 0;

        testS364_ = 0L;

        testU32_ = 0;

        testU64_ = 0L;

        testFixed32_ = 0;

        testFixed64_ = 0L;

        testsfixed32_ = 0;

        testsfixed64_ = 0L;

        testBool_ = false;

        testString_ = "";

        testBytes_ = com.google.protobuf.ByteString.EMPTY;

        listInt_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000002);
        internalGetMutableTestMap().clear();
        testEnum_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return GamePlayerTest.Test.internal_static_GamePlayerTest_TestMsg_descriptor;
      }

      @java.lang.Override
      public GamePlayerTest.Test.TestMsg getDefaultInstanceForType() {
        return GamePlayerTest.Test.TestMsg.getDefaultInstance();
      }

      @java.lang.Override
      public GamePlayerTest.Test.TestMsg build() {
        GamePlayerTest.Test.TestMsg result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public GamePlayerTest.Test.TestMsg buildPartial() {
        GamePlayerTest.Test.TestMsg result = new GamePlayerTest.Test.TestMsg(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.testD_ = testD_;
          to_bitField0_ |= 0x00000001;
        }
        result.testInt_ = testInt_;
        result.testLong_ = testLong_;
        result.testS32_ = testS32_;
        result.testS364_ = testS364_;
        result.testU32_ = testU32_;
        result.testU64_ = testU64_;
        result.testFixed32_ = testFixed32_;
        result.testFixed64_ = testFixed64_;
        result.testsfixed32_ = testsfixed32_;
        result.testsfixed64_ = testsfixed64_;
        result.testBool_ = testBool_;
        result.testString_ = testString_;
        result.testBytes_ = testBytes_;
        if (((bitField0_ & 0x00000002) != 0)) {
          listInt_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.listInt_ = listInt_;
        result.testMap_ = internalGetTestMap();
        result.testMap_.makeImmutable();
        result.testEnum_ = testEnum_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof GamePlayerTest.Test.TestMsg) {
          return mergeFrom((GamePlayerTest.Test.TestMsg)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(GamePlayerTest.Test.TestMsg other) {
        if (other == GamePlayerTest.Test.TestMsg.getDefaultInstance()) return this;
        if (other.hasTestD()) {
          setTestD(other.getTestD());
        }
        if (other.getTestInt() != 0) {
          setTestInt(other.getTestInt());
        }
        if (other.getTestLong() != 0L) {
          setTestLong(other.getTestLong());
        }
        if (other.getTestS32() != 0) {
          setTestS32(other.getTestS32());
        }
        if (other.getTestS364() != 0L) {
          setTestS364(other.getTestS364());
        }
        if (other.getTestU32() != 0) {
          setTestU32(other.getTestU32());
        }
        if (other.getTestU64() != 0L) {
          setTestU64(other.getTestU64());
        }
        if (other.getTestFixed32() != 0) {
          setTestFixed32(other.getTestFixed32());
        }
        if (other.getTestFixed64() != 0L) {
          setTestFixed64(other.getTestFixed64());
        }
        if (other.getTestsfixed32() != 0) {
          setTestsfixed32(other.getTestsfixed32());
        }
        if (other.getTestsfixed64() != 0L) {
          setTestsfixed64(other.getTestsfixed64());
        }
        if (other.getTestBool() != false) {
          setTestBool(other.getTestBool());
        }
        if (!other.getTestString().isEmpty()) {
          testString_ = other.testString_;
          onChanged();
        }
        if (other.getTestBytes() != com.google.protobuf.ByteString.EMPTY) {
          setTestBytes(other.getTestBytes());
        }
        if (!other.listInt_.isEmpty()) {
          if (listInt_.isEmpty()) {
            listInt_ = other.listInt_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureListIntIsMutable();
            listInt_.addAll(other.listInt_);
          }
          onChanged();
        }
        internalGetMutableTestMap().mergeFrom(
            other.internalGetTestMap());
        if (other.testEnum_ != 0) {
          setTestEnumValue(other.getTestEnumValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        GamePlayerTest.Test.TestMsg parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (GamePlayerTest.Test.TestMsg) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private double testD_ ;
      /**
       * <pre>
       *浮点数 等号后面代表变量的唯一编号
       *float testF = 1;
       * </pre>
       *
       * <code>optional double testD = 3;</code>
       * @return Whether the testD field is set.
       */
      @java.lang.Override
      public boolean hasTestD() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       *浮点数 等号后面代表变量的唯一编号
       *float testF = 1;
       * </pre>
       *
       * <code>optional double testD = 3;</code>
       * @return The testD.
       */
      @java.lang.Override
      public double getTestD() {
        return testD_;
      }
      /**
       * <pre>
       *浮点数 等号后面代表变量的唯一编号
       *float testF = 1;
       * </pre>
       *
       * <code>optional double testD = 3;</code>
       * @param value The testD to set.
       * @return This builder for chaining.
       */
      public Builder setTestD(double value) {
        bitField0_ |= 0x00000001;
        testD_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *浮点数 等号后面代表变量的唯一编号
       *float testF = 1;
       * </pre>
       *
       * <code>optional double testD = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTestD() {
        bitField0_ = (bitField0_ & ~0x00000001);
        testD_ = 0D;
        onChanged();
        return this;
      }

      private int testInt_ ;
      /**
       * <pre>
       *变长编码
       *所谓变长就是会根据数字大小 来使用对应的字节数存储
       *protobuf帮助我们优化的部分 可尽量使用少的字节数 来存储
       * </pre>
       *
       * <code>int32 testInt = 4;</code>
       * @return The testInt.
       */
      @java.lang.Override
      public int getTestInt() {
        return testInt_;
      }
      /**
       * <pre>
       *变长编码
       *所谓变长就是会根据数字大小 来使用对应的字节数存储
       *protobuf帮助我们优化的部分 可尽量使用少的字节数 来存储
       * </pre>
       *
       * <code>int32 testInt = 4;</code>
       * @param value The testInt to set.
       * @return This builder for chaining.
       */
      public Builder setTestInt(int value) {
        
        testInt_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *变长编码
       *所谓变长就是会根据数字大小 来使用对应的字节数存储
       *protobuf帮助我们优化的部分 可尽量使用少的字节数 来存储
       * </pre>
       *
       * <code>int32 testInt = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearTestInt() {
        
        testInt_ = 0;
        onChanged();
        return this;
      }

      private long testLong_ ;
      /**
       * <pre>
       *1 2 4 8
       * </pre>
       *
       * <code>int64 testLong = 5;</code>
       * @return The testLong.
       */
      @java.lang.Override
      public long getTestLong() {
        return testLong_;
      }
      /**
       * <pre>
       *1 2 4 8
       * </pre>
       *
       * <code>int64 testLong = 5;</code>
       * @param value The testLong to set.
       * @return This builder for chaining.
       */
      public Builder setTestLong(long value) {
        
        testLong_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *1 2 4 8
       * </pre>
       *
       * <code>int64 testLong = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearTestLong() {
        
        testLong_ = 0L;
        onChanged();
        return this;
      }

      private int testS32_ ;
      /**
       * <pre>
       *更适用于表示负数类型整数
       * </pre>
       *
       * <code>sint32 testS32 = 6;</code>
       * @return The testS32.
       */
      @java.lang.Override
      public int getTestS32() {
        return testS32_;
      }
      /**
       * <pre>
       *更适用于表示负数类型整数
       * </pre>
       *
       * <code>sint32 testS32 = 6;</code>
       * @param value The testS32 to set.
       * @return This builder for chaining.
       */
      public Builder setTestS32(int value) {
        
        testS32_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *更适用于表示负数类型整数
       * </pre>
       *
       * <code>sint32 testS32 = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearTestS32() {
        
        testS32_ = 0;
        onChanged();
        return this;
      }

      private long testS364_ ;
      /**
       * <pre>
       *C# - long 适用于表示负数
       * </pre>
       *
       * <code>sint64 testS364 = 7;</code>
       * @return The testS364.
       */
      @java.lang.Override
      public long getTestS364() {
        return testS364_;
      }
      /**
       * <pre>
       *C# - long 适用于表示负数
       * </pre>
       *
       * <code>sint64 testS364 = 7;</code>
       * @param value The testS364 to set.
       * @return This builder for chaining.
       */
      public Builder setTestS364(long value) {
        
        testS364_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *C# - long 适用于表示负数
       * </pre>
       *
       * <code>sint64 testS364 = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearTestS364() {
        
        testS364_ = 0L;
        onChanged();
        return this;
      }

      private int testU32_ ;
      /**
       * <pre>
       *无符号变长编码
       * </pre>
       *
       * <code>uint32 testU32 = 8;</code>
       * @return The testU32.
       */
      @java.lang.Override
      public int getTestU32() {
        return testU32_;
      }
      /**
       * <pre>
       *无符号变长编码
       * </pre>
       *
       * <code>uint32 testU32 = 8;</code>
       * @param value The testU32 to set.
       * @return This builder for chaining.
       */
      public Builder setTestU32(int value) {
        
        testU32_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *无符号变长编码
       * </pre>
       *
       * <code>uint32 testU32 = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearTestU32() {
        
        testU32_ = 0;
        onChanged();
        return this;
      }

      private long testU64_ ;
      /**
       * <pre>
       *C# - ulong 变长的编码
       * </pre>
       *
       * <code>uint64 testU64 = 9;</code>
       * @return The testU64.
       */
      @java.lang.Override
      public long getTestU64() {
        return testU64_;
      }
      /**
       * <pre>
       *C# - ulong 变长的编码
       * </pre>
       *
       * <code>uint64 testU64 = 9;</code>
       * @param value The testU64 to set.
       * @return This builder for chaining.
       */
      public Builder setTestU64(long value) {
        
        testU64_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *C# - ulong 变长的编码
       * </pre>
       *
       * <code>uint64 testU64 = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearTestU64() {
        
        testU64_ = 0L;
        onChanged();
        return this;
      }

      private int testFixed32_ ;
      /**
       * <pre>
       *固定字节数的类型
       *通常用来表示大于2的28次方的数 比uint32更有效 始终是4个字节
       * </pre>
       *
       * <code>fixed32 testFixed32 = 10;</code>
       * @return The testFixed32.
       */
      @java.lang.Override
      public int getTestFixed32() {
        return testFixed32_;
      }
      /**
       * <pre>
       *固定字节数的类型
       *通常用来表示大于2的28次方的数 比uint32更有效 始终是4个字节
       * </pre>
       *
       * <code>fixed32 testFixed32 = 10;</code>
       * @param value The testFixed32 to set.
       * @return This builder for chaining.
       */
      public Builder setTestFixed32(int value) {
        
        testFixed32_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *固定字节数的类型
       *通常用来表示大于2的28次方的数 比uint32更有效 始终是4个字节
       * </pre>
       *
       * <code>fixed32 testFixed32 = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearTestFixed32() {
        
        testFixed32_ = 0;
        onChanged();
        return this;
      }

      private long testFixed64_ ;
      /**
       * <pre>
       *通常用来表示大于2的56次方的数 比uint64更有效 始终是8个字节
       * </pre>
       *
       * <code>fixed64 testFixed64 = 11;</code>
       * @return The testFixed64.
       */
      @java.lang.Override
      public long getTestFixed64() {
        return testFixed64_;
      }
      /**
       * <pre>
       *通常用来表示大于2的56次方的数 比uint64更有效 始终是8个字节
       * </pre>
       *
       * <code>fixed64 testFixed64 = 11;</code>
       * @param value The testFixed64 to set.
       * @return This builder for chaining.
       */
      public Builder setTestFixed64(long value) {
        
        testFixed64_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *通常用来表示大于2的56次方的数 比uint64更有效 始终是8个字节
       * </pre>
       *
       * <code>fixed64 testFixed64 = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearTestFixed64() {
        
        testFixed64_ = 0L;
        onChanged();
        return this;
      }

      private int testsfixed32_ ;
      /**
       * <pre>
       *C# - int 始终是4个字节
       * </pre>
       *
       * <code>sfixed32 testsfixed32 = 12;</code>
       * @return The testsfixed32.
       */
      @java.lang.Override
      public int getTestsfixed32() {
        return testsfixed32_;
      }
      /**
       * <pre>
       *C# - int 始终是4个字节
       * </pre>
       *
       * <code>sfixed32 testsfixed32 = 12;</code>
       * @param value The testsfixed32 to set.
       * @return This builder for chaining.
       */
      public Builder setTestsfixed32(int value) {
        
        testsfixed32_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *C# - int 始终是4个字节
       * </pre>
       *
       * <code>sfixed32 testsfixed32 = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearTestsfixed32() {
        
        testsfixed32_ = 0;
        onChanged();
        return this;
      }

      private long testsfixed64_ ;
      /**
       * <pre>
       *C# - long 始终是8个字节
       * </pre>
       *
       * <code>sfixed64 testsfixed64 = 13;</code>
       * @return The testsfixed64.
       */
      @java.lang.Override
      public long getTestsfixed64() {
        return testsfixed64_;
      }
      /**
       * <pre>
       *C# - long 始终是8个字节
       * </pre>
       *
       * <code>sfixed64 testsfixed64 = 13;</code>
       * @param value The testsfixed64 to set.
       * @return This builder for chaining.
       */
      public Builder setTestsfixed64(long value) {
        
        testsfixed64_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *C# - long 始终是8个字节
       * </pre>
       *
       * <code>sfixed64 testsfixed64 = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearTestsfixed64() {
        
        testsfixed64_ = 0L;
        onChanged();
        return this;
      }

      private boolean testBool_ ;
      /**
       * <pre>
       *其他类型
       * </pre>
       *
       * <code>bool testBool = 14;</code>
       * @return The testBool.
       */
      @java.lang.Override
      public boolean getTestBool() {
        return testBool_;
      }
      /**
       * <pre>
       *其他类型
       * </pre>
       *
       * <code>bool testBool = 14;</code>
       * @param value The testBool to set.
       * @return This builder for chaining.
       */
      public Builder setTestBool(boolean value) {
        
        testBool_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *其他类型
       * </pre>
       *
       * <code>bool testBool = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearTestBool() {
        
        testBool_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object testString_ = "";
      /**
       * <pre>
       *C# - string
       * </pre>
       *
       * <code>string testString = 15;</code>
       * @return The testString.
       */
      public java.lang.String getTestString() {
        java.lang.Object ref = testString_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          testString_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *C# - string
       * </pre>
       *
       * <code>string testString = 15;</code>
       * @return The bytes for testString.
       */
      public com.google.protobuf.ByteString
          getTestStringBytes() {
        java.lang.Object ref = testString_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          testString_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *C# - string
       * </pre>
       *
       * <code>string testString = 15;</code>
       * @param value The testString to set.
       * @return This builder for chaining.
       */
      public Builder setTestString(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        testString_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *C# - string
       * </pre>
       *
       * <code>string testString = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearTestString() {
        
        testString_ = getDefaultInstance().getTestString();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *C# - string
       * </pre>
       *
       * <code>string testString = 15;</code>
       * @param value The bytes for testString to set.
       * @return This builder for chaining.
       */
      public Builder setTestStringBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        testString_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString testBytes_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       *新的类型 protobuf自己实现的类型
       * </pre>
       *
       * <code>bytes testBytes = 16;</code>
       * @return The testBytes.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getTestBytes() {
        return testBytes_;
      }
      /**
       * <pre>
       *新的类型 protobuf自己实现的类型
       * </pre>
       *
       * <code>bytes testBytes = 16;</code>
       * @param value The testBytes to set.
       * @return This builder for chaining.
       */
      public Builder setTestBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        testBytes_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *新的类型 protobuf自己实现的类型
       * </pre>
       *
       * <code>bytes testBytes = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearTestBytes() {
        
        testBytes_ = getDefaultInstance().getTestBytes();
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList listInt_ = emptyIntList();
      private void ensureListIntIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          listInt_ = mutableCopy(listInt_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       *数组List
       * </pre>
       *
       * <code>repeated int32 listInt = 17;</code>
       * @return A list containing the listInt.
       */
      public java.util.List<java.lang.Integer>
          getListIntList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(listInt_) : listInt_;
      }
      /**
       * <pre>
       *数组List
       * </pre>
       *
       * <code>repeated int32 listInt = 17;</code>
       * @return The count of listInt.
       */
      public int getListIntCount() {
        return listInt_.size();
      }
      /**
       * <pre>
       *数组List
       * </pre>
       *
       * <code>repeated int32 listInt = 17;</code>
       * @param index The index of the element to return.
       * @return The listInt at the given index.
       */
      public int getListInt(int index) {
        return listInt_.getInt(index);
      }
      /**
       * <pre>
       *数组List
       * </pre>
       *
       * <code>repeated int32 listInt = 17;</code>
       * @param index The index to set the value at.
       * @param value The listInt to set.
       * @return This builder for chaining.
       */
      public Builder setListInt(
          int index, int value) {
        ensureListIntIsMutable();
        listInt_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *数组List
       * </pre>
       *
       * <code>repeated int32 listInt = 17;</code>
       * @param value The listInt to add.
       * @return This builder for chaining.
       */
      public Builder addListInt(int value) {
        ensureListIntIsMutable();
        listInt_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *数组List
       * </pre>
       *
       * <code>repeated int32 listInt = 17;</code>
       * @param values The listInt to add.
       * @return This builder for chaining.
       */
      public Builder addAllListInt(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureListIntIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, listInt_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *数组List
       * </pre>
       *
       * <code>repeated int32 listInt = 17;</code>
       * @return This builder for chaining.
       */
      public Builder clearListInt() {
        listInt_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.Integer, java.lang.String> testMap_;
      private com.google.protobuf.MapField<java.lang.Integer, java.lang.String>
      internalGetTestMap() {
        if (testMap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              TestMapDefaultEntryHolder.defaultEntry);
        }
        return testMap_;
      }
      private com.google.protobuf.MapField<java.lang.Integer, java.lang.String>
      internalGetMutableTestMap() {
        onChanged();;
        if (testMap_ == null) {
          testMap_ = com.google.protobuf.MapField.newMapField(
              TestMapDefaultEntryHolder.defaultEntry);
        }
        if (!testMap_.isMutable()) {
          testMap_ = testMap_.copy();
        }
        return testMap_;
      }

      public int getTestMapCount() {
        return internalGetTestMap().getMap().size();
      }
      /**
       * <pre>
       *字典 Dictionary
       * </pre>
       *
       * <code>map&lt;int32, string&gt; testMap = 18;</code>
       */

      @java.lang.Override
      public boolean containsTestMap(
          int key) {
        
        return internalGetTestMap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getTestMapMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.String> getTestMap() {
        return getTestMapMap();
      }
      /**
       * <pre>
       *字典 Dictionary
       * </pre>
       *
       * <code>map&lt;int32, string&gt; testMap = 18;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Integer, java.lang.String> getTestMapMap() {
        return internalGetTestMap().getMap();
      }
      /**
       * <pre>
       *字典 Dictionary
       * </pre>
       *
       * <code>map&lt;int32, string&gt; testMap = 18;</code>
       */
      @java.lang.Override

      public java.lang.String getTestMapOrDefault(
          int key,
          java.lang.String defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.String> map =
            internalGetTestMap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       *字典 Dictionary
       * </pre>
       *
       * <code>map&lt;int32, string&gt; testMap = 18;</code>
       */
      @java.lang.Override

      public java.lang.String getTestMapOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.String> map =
            internalGetTestMap().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearTestMap() {
        internalGetMutableTestMap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       *字典 Dictionary
       * </pre>
       *
       * <code>map&lt;int32, string&gt; testMap = 18;</code>
       */

      public Builder removeTestMap(
          int key) {
        
        internalGetMutableTestMap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.String>
      getMutableTestMap() {
        return internalGetMutableTestMap().getMutableMap();
      }
      /**
       * <pre>
       *字典 Dictionary
       * </pre>
       *
       * <code>map&lt;int32, string&gt; testMap = 18;</code>
       */
      public Builder putTestMap(
          int key,
          java.lang.String value) {
        
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutableTestMap().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       *字典 Dictionary
       * </pre>
       *
       * <code>map&lt;int32, string&gt; testMap = 18;</code>
       */

      public Builder putAllTestMap(
          java.util.Map<java.lang.Integer, java.lang.String> values) {
        internalGetMutableTestMap().getMutableMap()
            .putAll(values);
        return this;
      }

      private int testEnum_ = 0;
      /**
       * <pre>
       *枚举成员变量的声明 需要唯一标识
       * </pre>
       *
       * <code>.GamePlayerTest.TestEnum testEnum = 19;</code>
       * @return The enum numeric value on the wire for testEnum.
       */
      @java.lang.Override public int getTestEnumValue() {
        return testEnum_;
      }
      /**
       * <pre>
       *枚举成员变量的声明 需要唯一标识
       * </pre>
       *
       * <code>.GamePlayerTest.TestEnum testEnum = 19;</code>
       * @param value The enum numeric value on the wire for testEnum to set.
       * @return This builder for chaining.
       */
      public Builder setTestEnumValue(int value) {
        
        testEnum_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *枚举成员变量的声明 需要唯一标识
       * </pre>
       *
       * <code>.GamePlayerTest.TestEnum testEnum = 19;</code>
       * @return The testEnum.
       */
      @java.lang.Override
      public GamePlayerTest.Test.TestEnum getTestEnum() {
        @SuppressWarnings("deprecation")
        GamePlayerTest.Test.TestEnum result = GamePlayerTest.Test.TestEnum.valueOf(testEnum_);
        return result == null ? GamePlayerTest.Test.TestEnum.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *枚举成员变量的声明 需要唯一标识
       * </pre>
       *
       * <code>.GamePlayerTest.TestEnum testEnum = 19;</code>
       * @param value The testEnum to set.
       * @return This builder for chaining.
       */
      public Builder setTestEnum(GamePlayerTest.Test.TestEnum value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        testEnum_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *枚举成员变量的声明 需要唯一标识
       * </pre>
       *
       * <code>.GamePlayerTest.TestEnum testEnum = 19;</code>
       * @return This builder for chaining.
       */
      public Builder clearTestEnum() {
        
        testEnum_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:GamePlayerTest.TestMsg)
    }

    // @@protoc_insertion_point(class_scope:GamePlayerTest.TestMsg)
    private static final GamePlayerTest.Test.TestMsg DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new GamePlayerTest.Test.TestMsg();
    }

    public static GamePlayerTest.Test.TestMsg getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TestMsg>
        PARSER = new com.google.protobuf.AbstractParser<TestMsg>() {
      @java.lang.Override
      public TestMsg parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TestMsg(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TestMsg> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TestMsg> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public GamePlayerTest.Test.TestMsg getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_GamePlayerTest_TestMsg_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_GamePlayerTest_TestMsg_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_GamePlayerTest_TestMsg_TestMapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_GamePlayerTest_TestMsg_TestMapEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\ntest.proto\022\016GamePlayerTest\"\310\003\n\007TestMsg" +
      "\022\022\n\005testD\030\003 \001(\001H\000\210\001\001\022\017\n\007testInt\030\004 \001(\005\022\020\n" +
      "\010testLong\030\005 \001(\003\022\017\n\007testS32\030\006 \001(\021\022\020\n\010test" +
      "S364\030\007 \001(\022\022\017\n\007testU32\030\010 \001(\r\022\017\n\007testU64\030\t" +
      " \001(\004\022\023\n\013testFixed32\030\n \001(\007\022\023\n\013testFixed64" +
      "\030\013 \001(\006\022\024\n\014testsfixed32\030\014 \001(\017\022\024\n\014testsfix" +
      "ed64\030\r \001(\020\022\020\n\010testBool\030\016 \001(\010\022\022\n\ntestStri" +
      "ng\030\017 \001(\t\022\021\n\ttestBytes\030\020 \001(\014\022\017\n\007listInt\030\021" +
      " \003(\005\0225\n\007testMap\030\022 \003(\0132$.GamePlayerTest.T" +
      "estMsg.TestMapEntry\022*\n\010testEnum\030\023 \001(\0162\030." +
      "GamePlayerTest.TestEnum\032.\n\014TestMapEntry\022" +
      "\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:\0028\001B\010\n\006_test" +
      "DJ\004\010\024\020\025* \n\010TestEnum\022\n\n\006NORMAL\020\000\022\010\n\004BOSS\020" +
      "\005b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_GamePlayerTest_TestMsg_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_GamePlayerTest_TestMsg_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_GamePlayerTest_TestMsg_descriptor,
        new java.lang.String[] { "TestD", "TestInt", "TestLong", "TestS32", "TestS364", "TestU32", "TestU64", "TestFixed32", "TestFixed64", "Testsfixed32", "Testsfixed64", "TestBool", "TestString", "TestBytes", "ListInt", "TestMap", "TestEnum", "TestD", });
    internal_static_GamePlayerTest_TestMsg_TestMapEntry_descriptor =
      internal_static_GamePlayerTest_TestMsg_descriptor.getNestedTypes().get(0);
    internal_static_GamePlayerTest_TestMsg_TestMapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_GamePlayerTest_TestMsg_TestMapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
